<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Blog</title>
    <link>https://okokfun.github.io/post/</link>
    <description>Recent content in Posts on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 22 Jul 2023 17:45:15 +0800</lastBuildDate><atom:link href="https://okokfun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Myfirst</title>
      <link>https://okokfun.github.io/post/stm32/</link>
      <pubDate>Sat, 22 Jul 2023 17:45:15 +0800</pubDate>
      
      <guid>https://okokfun.github.io/post/stm32/</guid>
      <description>STM32为意法半导体生产的32位微控制器
$$ AveP = \int_0^1 p(r) dr $$
#incldue &amp;lt;iostream&amp;gt; int main(void) ｛ std::cout &amp;lt;&amp;lt; &amp;#34;Hello World&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; ｝ </description>
    </item>
    
    <item>
      <title>12.7PMOS、NMOS和E2CMOS</title>
      <link>https://okokfun.github.io/post/12-7pmosnmos%E5%92%8Ce2cmos/</link>
      <pubDate>Fri, 21 Jul 2023 22:33:48 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-7pmosnmos%E5%92%8Ce2cmos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.6发射极耦合逻辑-ECL电路</title>
      <link>https://okokfun.github.io/post/12-6%E5%8F%91%E5%B0%84%E6%9E%81%E8%80%A6%E5%90%88%E9%80%BB%E8%BE%91-ecl%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 21 Jul 2023 22:33:24 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-6%E5%8F%91%E5%B0%84%E6%9E%81%E8%80%A6%E5%90%88%E9%80%BB%E8%BE%91-ecl%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.5CMOS和TTL性能的比较</title>
      <link>https://okokfun.github.io/post/12-5cmos%E5%92%8Cttl%E6%80%A7%E8%83%BD%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <pubDate>Fri, 21 Jul 2023 22:33:03 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-5cmos%E5%92%8Cttl%E6%80%A7%E8%83%BD%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.4TTL在实际使用中的注意事项</title>
      <link>https://okokfun.github.io/post/12-4ttl%E5%9C%A8%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 21 Jul 2023 22:32:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-4ttl%E5%9C%A8%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.3TTL电路</title>
      <link>https://okokfun.github.io/post/12-3ttl%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 21 Jul 2023 22:32:37 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-3ttl%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.2CMOS电路</title>
      <link>https://okokfun.github.io/post/12-2cmos%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 21 Jul 2023 22:32:24 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-2cmos%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.1基本操作特性和参数</title>
      <link>https://okokfun.github.io/post/12-1%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%89%B9%E6%80%A7%E5%92%8C%E5%8F%82%E6%95%B0/</link>
      <pubDate>Fri, 21 Jul 2023 22:32:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-1%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%89%B9%E6%80%A7%E5%92%8C%E5%8F%82%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.4数字信号处理基础</title>
      <link>https://okokfun.github.io/post/11-4%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 21 Jul 2023 22:31:50 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-4%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.3数—模转换方法</title>
      <link>https://okokfun.github.io/post/11-3%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 21 Jul 2023 22:31:38 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-3%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.2模—数转换方法</title>
      <link>https://okokfun.github.io/post/11-2%E6%A8%A1%E6%95%B0%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 21 Jul 2023 22:31:23 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-2%E6%A8%A1%E6%95%B0%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.1模拟信号转换为数字信号</title>
      <link>https://okokfun.github.io/post/11-1%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Fri, 21 Jul 2023 22:31:03 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-1%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.8磁和光存储</title>
      <link>https://okokfun.github.io/post/10-8%E7%A3%81%E5%92%8C%E5%85%89%E5%AD%98%E5%82%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:30:48 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-8%E7%A3%81%E5%92%8C%E5%85%89%E5%AD%98%E5%82%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.7特殊类型的存储器</title>
      <link>https://okokfun.github.io/post/10-7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AD%98%E5%82%A8%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:30:36 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AD%98%E5%82%A8%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.6存储器扩展</title>
      <link>https://okokfun.github.io/post/10-6%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/</link>
      <pubDate>Fri, 21 Jul 2023 22:30:22 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-6%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.5闪存</title>
      <link>https://okokfun.github.io/post/10-5%E9%97%AA%E5%AD%98/</link>
      <pubDate>Fri, 21 Jul 2023 22:30:03 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-5%E9%97%AA%E5%AD%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.4可编程ROM[PROM和EPROM]</title>
      <link>https://okokfun.github.io/post/10-4%E5%8F%AF%E7%BC%96%E7%A8%8Brom-prom%E5%92%8Ceprom/</link>
      <pubDate>Fri, 21 Jul 2023 22:29:20 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-4%E5%8F%AF%E7%BC%96%E7%A8%8Brom-prom%E5%92%8Ceprom/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.3只读存储器-ROM</title>
      <link>https://okokfun.github.io/post/10-3%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8-rom/</link>
      <pubDate>Fri, 21 Jul 2023 22:28:49 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-3%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8-rom/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.2随机存储器-RAM</title>
      <link>https://okokfun.github.io/post/10-2%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%82%A8%E5%99%A8-ram/</link>
      <pubDate>Fri, 21 Jul 2023 22:28:08 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-2%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%82%A8%E5%99%A8-ram/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.1半导体存储器基础</title>
      <link>https://okokfun.github.io/post/10-1%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%AD%98%E5%82%A8%E5%99%A8%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 21 Jul 2023 22:27:20 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-1%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%AD%98%E5%82%A8%E5%99%A8%E5%9F%BA%E7%A1%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.9关联标注的逻辑符号</title>
      <link>https://okokfun.github.io/post/9-9%E5%85%B3%E8%81%94%E6%A0%87%E6%B3%A8%E7%9A%84%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7/</link>
      <pubDate>Fri, 21 Jul 2023 22:27:02 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-9%E5%85%B3%E8%81%94%E6%A0%87%E6%B3%A8%E7%9A%84%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.8移位寄存器应用</title>
      <link>https://okokfun.github.io/post/9-8%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:26:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-8%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E5%BA%94%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.7移位寄存器计数器</title>
      <link>https://okokfun.github.io/post/9-7%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E8%AE%A1%E6%95%B0%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:26:39 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-7%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E8%AE%A1%E6%95%B0%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.6双向移位寄存器</title>
      <link>https://okokfun.github.io/post/9-6%E5%8F%8C%E5%90%91%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:26:26 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-6%E5%8F%8C%E5%90%91%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.5并行输入/并行输出移位寄存器</title>
      <link>https://okokfun.github.io/post/9-5%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%85%A5-%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:26:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-5%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%85%A5-%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.4并行输入/串行输出移位寄存器</title>
      <link>https://okokfun.github.io/post/9-4%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%85%A5-%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:25:20 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-4%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%85%A5-%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.3串行输入/并行输出移位寄存器</title>
      <link>https://okokfun.github.io/post/9-3%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%85%A5-%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:25:06 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-3%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%85%A5-%E5%B9%B6%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.2串行输入/串行输出移位寄存器</title>
      <link>https://okokfun.github.io/post/9-2%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%85%A5-%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:24:45 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-2%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%85%A5-%E4%B8%B2%E8%A1%8C%E8%BE%93%E5%87%BA%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.1基本移位寄存器的功能</title>
      <link>https://okokfun.github.io/post/9-1%E5%9F%BA%E6%9C%AC%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 21 Jul 2023 22:24:31 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-1%E5%9F%BA%E6%9C%AC%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%8A%9F%E8%83%BD/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.8关联标注的逻辑符号</title>
      <link>https://okokfun.github.io/post/8-8%E5%85%B3%E8%81%94%E6%A0%87%E6%B3%A8%E7%9A%84%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7/</link>
      <pubDate>Fri, 21 Jul 2023 22:24:12 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-8%E5%85%B3%E8%81%94%E6%A0%87%E6%B3%A8%E7%9A%84%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.7计数器应用</title>
      <link>https://okokfun.github.io/post/8-7%E8%AE%A1%E6%95%B0%E5%99%A8%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:23:59 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-7%E8%AE%A1%E6%95%B0%E5%99%A8%E5%BA%94%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.6计数器译码</title>
      <link>https://okokfun.github.io/post/8-6%E8%AE%A1%E6%95%B0%E5%99%A8%E8%AF%91%E7%A0%81/</link>
      <pubDate>Fri, 21 Jul 2023 22:23:32 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-6%E8%AE%A1%E6%95%B0%E5%99%A8%E8%AF%91%E7%A0%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.5级联计数器</title>
      <link>https://okokfun.github.io/post/8-5%E7%BA%A7%E8%81%94%E8%AE%A1%E6%95%B0%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:23:18 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-5%E7%BA%A7%E8%81%94%E8%AE%A1%E6%95%B0%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.4同步计数器的设计</title>
      <link>https://okokfun.github.io/post/8-4%E5%90%8C%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 21 Jul 2023 22:22:10 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-4%E5%90%8C%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.3加/减同步计数器</title>
      <link>https://okokfun.github.io/post/8-3%E5%8A%A0-%E5%87%8F%E5%90%8C%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:21:58 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-3%E5%8A%A0-%E5%87%8F%E5%90%8C%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.2同步计数器运算</title>
      <link>https://okokfun.github.io/post/8-2%E5%90%8C%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8%E8%BF%90%E7%AE%97/</link>
      <pubDate>Fri, 21 Jul 2023 22:21:47 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-2%E5%90%8C%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8%E8%BF%90%E7%AE%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.1异步计数器运算</title>
      <link>https://okokfun.github.io/post/8-1%E5%BC%82%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8%E8%BF%90%E7%AE%97/</link>
      <pubDate>Fri, 21 Jul 2023 22:21:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-1%E5%BC%82%E6%AD%A5%E8%AE%A1%E6%95%B0%E5%99%A8%E8%BF%90%E7%AE%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.6非稳态多谐振荡器</title>
      <link>https://okokfun.github.io/post/7-6%E9%9D%9E%E7%A8%B3%E6%80%81%E5%A4%9A%E8%B0%90%E6%8C%AF%E8%8D%A1%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:21:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-6%E9%9D%9E%E7%A8%B3%E6%80%81%E5%A4%9A%E8%B0%90%E6%8C%AF%E8%8D%A1%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.5单稳态触发器</title>
      <link>https://okokfun.github.io/post/7-5%E5%8D%95%E7%A8%B3%E6%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:20:48 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-5%E5%8D%95%E7%A8%B3%E6%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.4触发器应用</title>
      <link>https://okokfun.github.io/post/7-4%E8%A7%A6%E5%8F%91%E5%99%A8%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:20:19 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-4%E8%A7%A6%E5%8F%91%E5%99%A8%E5%BA%94%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.3触发器运算特性</title>
      <link>https://okokfun.github.io/post/7-3%E8%A7%A6%E5%8F%91%E5%99%A8%E8%BF%90%E7%AE%97%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 21 Jul 2023 22:20:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-3%E8%A7%A6%E5%8F%91%E5%99%A8%E8%BF%90%E7%AE%97%E7%89%B9%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.2边沿触发器</title>
      <link>https://okokfun.github.io/post/7-2%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:19:46 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-2%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.1锁存器</title>
      <link>https://okokfun.github.io/post/7-1%E9%94%81%E5%AD%98%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:19:28 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-1%E9%94%81%E5%AD%98%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.10奇偶发生器/校验器</title>
      <link>https://okokfun.github.io/post/6-10%E5%A5%87%E5%81%B6%E5%8F%91%E7%94%9F%E5%99%A8-%E6%A0%A1%E9%AA%8C%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:18:55 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-10%E5%A5%87%E5%81%B6%E5%8F%91%E7%94%9F%E5%99%A8-%E6%A0%A1%E9%AA%8C%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.9多路分配器</title>
      <link>https://okokfun.github.io/post/6-9%E5%A4%9A%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:18:40 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-9%E5%A4%9A%E8%B7%AF%E5%88%86%E9%85%8D%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.8多路复用器-数据选择器</title>
      <link>https://okokfun.github.io/post/6-8%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%99%A8-%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:18:25 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-8%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%99%A8-%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.7代码转换器</title>
      <link>https://okokfun.github.io/post/6-7%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:17:58 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-7%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.6编码器</title>
      <link>https://okokfun.github.io/post/6-6%E7%BC%96%E7%A0%81%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:17:47 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-6%E7%BC%96%E7%A0%81%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.5译码器</title>
      <link>https://okokfun.github.io/post/6-5%E8%AF%91%E7%A0%81%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:17:28 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-5%E8%AF%91%E7%A0%81%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.4比较器</title>
      <link>https://okokfun.github.io/post/6-4%E6%AF%94%E8%BE%83%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:17:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-4%E6%AF%94%E8%BE%83%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.3异步进位与超前进位加法器</title>
      <link>https://okokfun.github.io/post/6-3%E5%BC%82%E6%AD%A5%E8%BF%9B%E4%BD%8D%E4%B8%8E%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:16:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-3%E5%BC%82%E6%AD%A5%E8%BF%9B%E4%BD%8D%E4%B8%8E%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.2并行二进制加法器</title>
      <link>https://okokfun.github.io/post/6-2%E5%B9%B6%E8%A1%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:16:12 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-2%E5%B9%B6%E8%A1%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.1基本加法器</title>
      <link>https://okokfun.github.io/post/6-1%E5%9F%BA%E6%9C%AC%E5%8A%A0%E6%B3%95%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2023 22:15:49 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-1%E5%9F%BA%E6%9C%AC%E5%8A%A0%E6%B3%95%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.5具有脉冲波形输入的逻辑电路运算</title>
      <link>https://okokfun.github.io/post/5-5%E5%85%B7%E6%9C%89%E8%84%89%E5%86%B2%E6%B3%A2%E5%BD%A2%E8%BE%93%E5%85%A5%E7%9A%84%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E8%BF%90%E7%AE%97/</link>
      <pubDate>Fri, 21 Jul 2023 22:15:09 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-5%E5%85%B7%E6%9C%89%E8%84%89%E5%86%B2%E6%B3%A2%E5%BD%A2%E8%BE%93%E5%85%A5%E7%9A%84%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E8%BF%90%E7%AE%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.4使用与非门和或非门的组合逻辑</title>
      <link>https://okokfun.github.io/post/5-4%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%92%8C%E6%88%96%E9%9D%9E%E9%97%A8%E7%9A%84%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91/</link>
      <pubDate>Fri, 21 Jul 2023 22:14:40 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-4%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%92%8C%E6%88%96%E9%9D%9E%E9%97%A8%E7%9A%84%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.3与非门和或非门的通用特性</title>
      <link>https://okokfun.github.io/post/5-3%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%92%8C%E6%88%96%E9%9D%9E%E9%97%A8%E7%9A%84%E9%80%9A%E7%94%A8%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 21 Jul 2023 22:14:23 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-3%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%92%8C%E6%88%96%E9%9D%9E%E9%97%A8%E7%9A%84%E9%80%9A%E7%94%A8%E7%89%B9%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.2组合逻辑电路的实现</title>
      <link>https://okokfun.github.io/post/5-2%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 21 Jul 2023 22:14:09 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-2%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.1基本组合逻辑电路</title>
      <link>https://okokfun.github.io/post/5-1%E5%9F%BA%E6%9C%AC%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 21 Jul 2023 22:13:52 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-1%E5%9F%BA%E6%9C%AC%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.10:5变量的卡诺图</title>
      <link>https://okokfun.github.io/post/4-10-5%E5%8F%98%E9%87%8F%E7%9A%84%E5%8D%A1%E8%AF%BA%E5%9B%BE/</link>
      <pubDate>Fri, 14 Jul 2023 19:07:46 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-10-5%E5%8F%98%E9%87%8F%E7%9A%84%E5%8D%A1%E8%AF%BA%E5%9B%BE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.9卡诺图乘积项之和的最小化</title>
      <link>https://okokfun.github.io/post/4-9%E5%8D%A1%E8%AF%BA%E5%9B%BE%E4%B9%98%E7%A7%AF%E9%A1%B9%E4%B9%8B%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%8C%96/</link>
      <pubDate>Fri, 14 Jul 2023 19:07:32 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-9%E5%8D%A1%E8%AF%BA%E5%9B%BE%E4%B9%98%E7%A7%AF%E9%A1%B9%E4%B9%8B%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%8C%96/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.8卡诺图</title>
      <link>https://okokfun.github.io/post/4-8%E5%8D%A1%E8%AF%BA%E5%9B%BE/</link>
      <pubDate>Fri, 14 Jul 2023 19:06:40 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-8%E5%8D%A1%E8%AF%BA%E5%9B%BE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.7布尔表达式和真值表</title>
      <link>https://okokfun.github.io/post/4-7%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E7%9C%9F%E5%80%BC%E8%A1%A8/</link>
      <pubDate>Fri, 14 Jul 2023 19:06:31 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-7%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E7%9C%9F%E5%80%BC%E8%A1%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.6布尔表达式的标准形式</title>
      <link>https://okokfun.github.io/post/4-6%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%A0%87%E5%87%86%E5%BD%A2%E5%BC%8F/</link>
      <pubDate>Fri, 14 Jul 2023 19:06:22 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-6%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%A0%87%E5%87%86%E5%BD%A2%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.5使用布尔代数进行化简</title>
      <link>https://okokfun.github.io/post/4-5%E4%BD%BF%E7%94%A8%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0%E8%BF%9B%E8%A1%8C%E5%8C%96%E7%AE%80/</link>
      <pubDate>Fri, 14 Jul 2023 19:06:12 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-5%E4%BD%BF%E7%94%A8%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0%E8%BF%9B%E8%A1%8C%E5%8C%96%E7%AE%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.4逻辑电路的布尔分析</title>
      <link>https://okokfun.github.io/post/4-4%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E7%9A%84%E5%B8%83%E5%B0%94%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 14 Jul 2023 19:05:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-4%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E7%9A%84%E5%B8%83%E5%B0%94%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.3狄摩根定理</title>
      <link>https://okokfun.github.io/post/4-3%E7%8B%84%E6%91%A9%E6%A0%B9%E5%AE%9A%E7%90%86/</link>
      <pubDate>Fri, 14 Jul 2023 19:05:42 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-3%E7%8B%84%E6%91%A9%E6%A0%B9%E5%AE%9A%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.2布尔代数的定律和法则</title>
      <link>https://okokfun.github.io/post/4-2%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0%E7%9A%84%E5%AE%9A%E5%BE%8B%E5%92%8C%E6%B3%95%E5%88%99/</link>
      <pubDate>Fri, 14 Jul 2023 19:05:32 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-2%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0%E7%9A%84%E5%AE%9A%E5%BE%8B%E5%92%8C%E6%B3%95%E5%88%99/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.1布尔运算和表达式</title>
      <link>https://okokfun.github.io/post/4-1%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 14 Jul 2023 19:05:21 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-1%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.7固定功能逻辑</title>
      <link>https://okokfun.github.io/post/3-7%E5%9B%BA%E5%AE%9A%E5%8A%9F%E8%83%BD%E9%80%BB%E8%BE%91/</link>
      <pubDate>Fri, 14 Jul 2023 19:05:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-7%E5%9B%BA%E5%AE%9A%E5%8A%9F%E8%83%BD%E9%80%BB%E8%BE%91/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.6异或门和同或门</title>
      <link>https://okokfun.github.io/post/3-6%E5%BC%82%E6%88%96%E9%97%A8%E5%92%8C%E5%90%8C%E6%88%96%E9%97%A8/</link>
      <pubDate>Fri, 14 Jul 2023 19:05:01 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-6%E5%BC%82%E6%88%96%E9%97%A8%E5%92%8C%E5%90%8C%E6%88%96%E9%97%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.5或非门</title>
      <link>https://okokfun.github.io/post/3-5%E6%88%96%E9%9D%9E%E9%97%A8/</link>
      <pubDate>Fri, 14 Jul 2023 19:04:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-5%E6%88%96%E9%9D%9E%E9%97%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.4与非门</title>
      <link>https://okokfun.github.io/post/3-4%E4%B8%8E%E9%9D%9E%E9%97%A8/</link>
      <pubDate>Fri, 14 Jul 2023 19:04:42 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-4%E4%B8%8E%E9%9D%9E%E9%97%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.3或门</title>
      <link>https://okokfun.github.io/post/3-3%E6%88%96%E9%97%A8/</link>
      <pubDate>Fri, 14 Jul 2023 19:04:34 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-3%E6%88%96%E9%97%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.2与门</title>
      <link>https://okokfun.github.io/post/3-2%E4%B8%8E%E9%97%A8/</link>
      <pubDate>Fri, 14 Jul 2023 19:04:25 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-2%E4%B8%8E%E9%97%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.1反相器</title>
      <link>https://okokfun.github.io/post/3-1%E5%8F%8D%E7%9B%B8%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 19:04:15 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-1%E5%8F%8D%E7%9B%B8%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.12错误检测码</title>
      <link>https://okokfun.github.io/post/2-12%E9%94%99%E8%AF%AF%E6%A3%80%E6%B5%8B%E7%A0%81/</link>
      <pubDate>Fri, 14 Jul 2023 19:03:59 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-12%E9%94%99%E8%AF%AF%E6%A3%80%E6%B5%8B%E7%A0%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.11数字编码</title>
      <link>https://okokfun.github.io/post/2-11%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 14 Jul 2023 19:03:50 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-11%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.10二—十进制编码-BCD</title>
      <link>https://okokfun.github.io/post/2-10%E4%BA%8C%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81-bcd/</link>
      <pubDate>Fri, 14 Jul 2023 19:03:37 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-10%E4%BA%8C%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81-bcd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.9八进制数</title>
      <link>https://okokfun.github.io/post/2-9%E5%85%AB%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
      <pubDate>Fri, 14 Jul 2023 19:03:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-9%E5%85%AB%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.8十六进制数</title>
      <link>https://okokfun.github.io/post/2-8%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
      <pubDate>Fri, 14 Jul 2023 19:03:03 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-8%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.7带符号数的算术运算</title>
      <link>https://okokfun.github.io/post/2-7%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/</link>
      <pubDate>Fri, 14 Jul 2023 19:02:52 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-7%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.6带符号数</title>
      <link>https://okokfun.github.io/post/2-6%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0/</link>
      <pubDate>Fri, 14 Jul 2023 19:02:43 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-6%E5%B8%A6%E7%AC%A6%E5%8F%B7%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.5二进制数的反码和补码</title>
      <link>https://okokfun.github.io/post/2-5%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/</link>
      <pubDate>Fri, 14 Jul 2023 19:02:15 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-5%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.4二进制算术</title>
      <link>https://okokfun.github.io/post/2-4%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%AE%97%E6%9C%AF/</link>
      <pubDate>Fri, 14 Jul 2023 19:02:06 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-4%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%AE%97%E6%9C%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.3十进制数到二进制数的转换</title>
      <link>https://okokfun.github.io/post/2-3%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0%E5%88%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 14 Jul 2023 19:01:56 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-3%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0%E5%88%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.2二进制数</title>
      <link>https://okokfun.github.io/post/2-2%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
      <pubDate>Fri, 14 Jul 2023 19:01:45 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-2%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.1十进制数</title>
      <link>https://okokfun.github.io/post/2-1%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
      <pubDate>Fri, 14 Jul 2023 19:01:36 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-1%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.3固定功能的集成电路</title>
      <link>https://okokfun.github.io/post/1-3%E5%9B%BA%E5%AE%9A%E5%8A%9F%E8%83%BD%E7%9A%84%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 14 Jul 2023 19:01:23 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-3%E5%9B%BA%E5%AE%9A%E5%8A%9F%E8%83%BD%E7%9A%84%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.2二进制数、逻辑电平和数字波形</title>
      <link>https://okokfun.github.io/post/1-2%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E9%80%BB%E8%BE%91%E7%94%B5%E5%B9%B3%E5%92%8C%E6%95%B0%E5%AD%97%E6%B3%A2%E5%BD%A2/</link>
      <pubDate>Fri, 14 Jul 2023 19:01:12 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-2%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E9%80%BB%E8%BE%91%E7%94%B5%E5%B9%B3%E5%92%8C%E6%95%B0%E5%AD%97%E6%B3%A2%E5%BD%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.1数字量与模拟量</title>
      <link>https://okokfun.github.io/post/1-1%E6%95%B0%E5%AD%97%E9%87%8F%E4%B8%8E%E6%A8%A1%E6%8B%9F%E9%87%8F/</link>
      <pubDate>Fri, 14 Jul 2023 18:57:32 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-1%E6%95%B0%E5%AD%97%E9%87%8F%E4%B8%8E%E6%A8%A1%E6%8B%9F%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>15.5功率控制</title>
      <link>https://okokfun.github.io/post/15-5%E5%8A%9F%E7%8E%87%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 14 Jul 2023 18:30:27 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/15-5%E5%8A%9F%E7%8E%87%E6%8E%A7%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>15.4应变测量、压力测量和运动测量</title>
      <link>https://okokfun.github.io/post/15-4%E5%BA%94%E5%8F%98%E6%B5%8B%E9%87%8F%E5%8E%8B%E5%8A%9B%E6%B5%8B%E9%87%8F%E5%92%8C%E8%BF%90%E5%8A%A8%E6%B5%8B%E9%87%8F/</link>
      <pubDate>Fri, 14 Jul 2023 18:30:17 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/15-4%E5%BA%94%E5%8F%98%E6%B5%8B%E9%87%8F%E5%8E%8B%E5%8A%9B%E6%B5%8B%E9%87%8F%E5%92%8C%E8%BF%90%E5%8A%A8%E6%B5%8B%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>15.3温度测量</title>
      <link>https://okokfun.github.io/post/15-3%E6%B8%A9%E5%BA%A6%E6%B5%8B%E9%87%8F/</link>
      <pubDate>Fri, 14 Jul 2023 18:30:08 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/15-3%E6%B8%A9%E5%BA%A6%E6%B5%8B%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>15.2角度测量</title>
      <link>https://okokfun.github.io/post/15-2%E8%A7%92%E5%BA%A6%E6%B5%8B%E9%87%8F/</link>
      <pubDate>Fri, 14 Jul 2023 18:30:00 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/15-2%E8%A7%92%E5%BA%A6%E6%B5%8B%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>15.1RMS-DC转换器</title>
      <link>https://okokfun.github.io/post/15-1rms-dc%E8%BD%AC%E6%8D%A2%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:29:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/15-1rms-dc%E8%BD%AC%E6%8D%A2%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.8故障检测</title>
      <link>https://okokfun.github.io/post/14-8%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Fri, 14 Jul 2023 18:29:41 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-8%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.7V/F和F/V转换器</title>
      <link>https://okokfun.github.io/post/14-7v-f%E5%92%8Cf-v%E8%BD%AC%E6%8D%A2%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:29:31 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-7v-f%E5%92%8Cf-v%E8%BD%AC%E6%8D%A2%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.6A/D转换方法</title>
      <link>https://okokfun.github.io/post/14-6a-d%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 14 Jul 2023 18:29:21 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-6a-d%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.5A/D转换的基本概念</title>
      <link>https://okokfun.github.io/post/14-5a-d%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 14 Jul 2023 18:26:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-5a-d%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.4D/A转换</title>
      <link>https://okokfun.github.io/post/14-4d-a%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 14 Jul 2023 18:26:19 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-4d-a%E8%BD%AC%E6%8D%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.3模拟和数字接口</title>
      <link>https://okokfun.github.io/post/14-3%E6%A8%A1%E6%8B%9F%E5%92%8C%E6%95%B0%E5%AD%97%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 14 Jul 2023 18:26:07 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-3%E6%A8%A1%E6%8B%9F%E5%92%8C%E6%95%B0%E5%AD%97%E6%8E%A5%E5%8F%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.2采样保持放大器</title>
      <link>https://okokfun.github.io/post/14-2%E9%87%87%E6%A0%B7%E4%BF%9D%E6%8C%81%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:25:55 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-2%E9%87%87%E6%A0%B7%E4%BF%9D%E6%8C%81%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>14.1模拟开关</title>
      <link>https://okokfun.github.io/post/14-1%E6%A8%A1%E6%8B%9F%E5%BC%80%E5%85%B3/</link>
      <pubDate>Fri, 14 Jul 2023 18:25:46 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/14-1%E6%A8%A1%E6%8B%9F%E5%BC%80%E5%85%B3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.9光纤</title>
      <link>https://okokfun.github.io/post/13-9%E5%85%89%E7%BA%A4/</link>
      <pubDate>Fri, 14 Jul 2023 18:25:37 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-9%E5%85%89%E7%BA%A4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.8PLL</title>
      <link>https://okokfun.github.io/post/13-8pll/</link>
      <pubDate>Fri, 14 Jul 2023 18:25:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-8pll/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.7频率调制</title>
      <link>https://okokfun.github.io/post/13-7%E9%A2%91%E7%8E%87%E8%B0%83%E5%88%B6/</link>
      <pubDate>Fri, 14 Jul 2023 18:25:21 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-7%E9%A2%91%E7%8E%87%E8%B0%83%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.6IF和音频放大器</title>
      <link>https://okokfun.github.io/post/13-6if%E5%92%8C%E9%9F%B3%E9%A2%91%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:25:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-6if%E5%92%8C%E9%9F%B3%E9%A2%91%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.5AM解调</title>
      <link>https://okokfun.github.io/post/13-5am%E8%A7%A3%E8%B0%83/</link>
      <pubDate>Fri, 14 Jul 2023 18:25:02 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-5am%E8%A7%A3%E8%B0%83/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.4混频器</title>
      <link>https://okokfun.github.io/post/13-4%E6%B7%B7%E9%A2%91%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:24:53 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-4%E6%B7%B7%E9%A2%91%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.3幅度调制</title>
      <link>https://okokfun.github.io/post/13-3%E5%B9%85%E5%BA%A6%E8%B0%83%E5%88%B6/</link>
      <pubDate>Fri, 14 Jul 2023 18:24:46 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-3%E5%B9%85%E5%BA%A6%E8%B0%83%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.2线性乘法器</title>
      <link>https://okokfun.github.io/post/13-2%E7%BA%BF%E6%80%A7%E4%B9%98%E6%B3%95%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:24:36 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-2%E7%BA%BF%E6%80%A7%E4%B9%98%E6%B3%95%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>13.1基本接收机</title>
      <link>https://okokfun.github.io/post/13-1%E5%9F%BA%E6%9C%AC%E6%8E%A5%E6%94%B6%E6%9C%BA/</link>
      <pubDate>Fri, 14 Jul 2023 18:24:26 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/13-1%E5%9F%BA%E6%9C%AC%E6%8E%A5%E6%94%B6%E6%9C%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.4对数和反对数放大器</title>
      <link>https://okokfun.github.io/post/12-4%E5%AF%B9%E6%95%B0%E5%92%8C%E5%8F%8D%E5%AF%B9%E6%95%B0%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:24:08 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-4%E5%AF%B9%E6%95%B0%E5%92%8C%E5%8F%8D%E5%AF%B9%E6%95%B0%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.3OTA</title>
      <link>https://okokfun.github.io/post/12-3ota/</link>
      <pubDate>Fri, 14 Jul 2023 18:23:57 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-3ota/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.2隔离放大器</title>
      <link>https://okokfun.github.io/post/12-2%E9%9A%94%E7%A6%BB%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:23:47 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-2%E9%9A%94%E7%A6%BB%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>12.1仪表放大器</title>
      <link>https://okokfun.github.io/post/12-1%E4%BB%AA%E8%A1%A8%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:23:37 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/12-1%E4%BB%AA%E8%A1%A8%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.6IC稳压器的应用</title>
      <link>https://okokfun.github.io/post/11-6ic%E7%A8%B3%E5%8E%8B%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:23:23 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-6ic%E7%A8%B3%E5%8E%8B%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.5IC稳压器</title>
      <link>https://okokfun.github.io/post/11-5ic%E7%A8%B3%E5%8E%8B%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:23:13 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-5ic%E7%A8%B3%E5%8E%8B%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.4基本开关稳压器</title>
      <link>https://okokfun.github.io/post/11-4%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%85%B3%E7%A8%B3%E5%8E%8B%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:23:03 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-4%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%85%B3%E7%A8%B3%E5%8E%8B%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.3基本并联稳压器</title>
      <link>https://okokfun.github.io/post/11-3%E5%9F%BA%E6%9C%AC%E5%B9%B6%E8%81%94%E7%A8%B3%E5%8E%8B%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:22:54 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-3%E5%9F%BA%E6%9C%AC%E5%B9%B6%E8%81%94%E7%A8%B3%E5%8E%8B%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.2基本串联稳压器</title>
      <link>https://okokfun.github.io/post/11-2%E5%9F%BA%E6%9C%AC%E4%B8%B2%E8%81%94%E7%A8%B3%E5%8E%8B%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:22:44 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-2%E5%9F%BA%E6%9C%AC%E4%B8%B2%E8%81%94%E7%A8%B3%E5%8E%8B%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>11.1稳压</title>
      <link>https://okokfun.github.io/post/11-1%E7%A8%B3%E5%8E%8B/</link>
      <pubDate>Fri, 14 Jul 2023 18:22:34 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/11-1%E7%A8%B3%E5%8E%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.7 555定时器作为单稳态触发器</title>
      <link>https://okokfun.github.io/post/10-7555%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BD%9C%E4%B8%BA%E5%8D%95%E7%A8%B3%E6%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:21:32 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-7555%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BD%9C%E4%B8%BA%E5%8D%95%E7%A8%B3%E6%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.6 555定时器作为振荡器</title>
      <link>https://okokfun.github.io/post/10-6555%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BD%9C%E4%B8%BA%E6%8C%AF%E8%8D%A1%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:21:22 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-6555%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BD%9C%E4%B8%BA%E6%8C%AF%E8%8D%A1%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.5弛豫振荡器原理</title>
      <link>https://okokfun.github.io/post/10-5%E5%BC%9B%E8%B1%AB%E6%8C%AF%E8%8D%A1%E5%99%A8%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 14 Jul 2023 18:21:12 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-5%E5%BC%9B%E8%B1%AB%E6%8C%AF%E8%8D%A1%E5%99%A8%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.4具有LC反馈电路的振荡器</title>
      <link>https://okokfun.github.io/post/10-4%E5%85%B7%E6%9C%89lc%E5%8F%8D%E9%A6%88%E7%94%B5%E8%B7%AF%E7%9A%84%E6%8C%AF%E8%8D%A1%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:21:01 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-4%E5%85%B7%E6%9C%89lc%E5%8F%8D%E9%A6%88%E7%94%B5%E8%B7%AF%E7%9A%84%E6%8C%AF%E8%8D%A1%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.3具有RC反馈电路的正弦波振荡器</title>
      <link>https://okokfun.github.io/post/10-3%E5%85%B7%E6%9C%89rc%E5%8F%8D%E9%A6%88%E7%94%B5%E8%B7%AF%E7%9A%84%E6%AD%A3%E5%BC%A6%E6%B3%A2%E6%8C%AF%E8%8D%A1%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:20:17 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-3%E5%85%B7%E6%9C%89rc%E5%8F%8D%E9%A6%88%E7%94%B5%E8%B7%AF%E7%9A%84%E6%AD%A3%E5%BC%A6%E6%B3%A2%E6%8C%AF%E8%8D%A1%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.2反馈振荡器原理</title>
      <link>https://okokfun.github.io/post/10-2%E5%8F%8D%E9%A6%88%E6%8C%AF%E8%8D%A1%E5%99%A8%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 14 Jul 2023 18:20:06 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-2%E5%8F%8D%E9%A6%88%E6%8C%AF%E8%8D%A1%E5%99%A8%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10.1振荡器</title>
      <link>https://okokfun.github.io/post/10-1%E6%8C%AF%E8%8D%A1%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:19:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/10-1%E6%8C%AF%E8%8D%A1%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.7测量滤波器响应</title>
      <link>https://okokfun.github.io/post/9-7%E6%B5%8B%E9%87%8F%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%93%8D%E5%BA%94/</link>
      <pubDate>Fri, 14 Jul 2023 18:19:41 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-7%E6%B5%8B%E9%87%8F%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%93%8D%E5%BA%94/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.6有源带阻滤波器</title>
      <link>https://okokfun.github.io/post/9-6%E6%9C%89%E6%BA%90%E5%B8%A6%E9%98%BB%E6%BB%A4%E6%B3%A2%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:19:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-6%E6%9C%89%E6%BA%90%E5%B8%A6%E9%98%BB%E6%BB%A4%E6%B3%A2%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.5有源带通滤波器</title>
      <link>https://okokfun.github.io/post/9-5%E6%9C%89%E6%BA%90%E5%B8%A6%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:19:18 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-5%E6%9C%89%E6%BA%90%E5%B8%A6%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.4有源高通滤波器</title>
      <link>https://okokfun.github.io/post/9-4%E6%9C%89%E6%BA%90%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:19:08 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-4%E6%9C%89%E6%BA%90%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.3有源低通滤波器</title>
      <link>https://okokfun.github.io/post/9-3%E6%9C%89%E6%BA%90%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:18:56 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-3%E6%9C%89%E6%BA%90%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.2滤波器的响应特性</title>
      <link>https://okokfun.github.io/post/9-2%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 14 Jul 2023 18:18:30 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-2%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E7%89%B9%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9.1基本滤波器响应</title>
      <link>https://okokfun.github.io/post/9-1%E5%9F%BA%E6%9C%AC%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%93%8D%E5%BA%94/</link>
      <pubDate>Fri, 14 Jul 2023 18:18:20 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/9-1%E5%9F%BA%E6%9C%AC%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%93%8D%E5%BA%94/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.5故障检测</title>
      <link>https://okokfun.github.io/post/8-5%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Fri, 14 Jul 2023 18:18:03 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-5%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.4转换器和其他运算放大器电路</title>
      <link>https://okokfun.github.io/post/8-4%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%92%8C%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 14 Jul 2023 18:17:53 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-4%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%92%8C%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.3积分器和微分器</title>
      <link>https://okokfun.github.io/post/8-3%E7%A7%AF%E5%88%86%E5%99%A8%E5%92%8C%E5%BE%AE%E5%88%86%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:17:37 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-3%E7%A7%AF%E5%88%86%E5%99%A8%E5%92%8C%E5%BE%AE%E5%88%86%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.2求和放大器</title>
      <link>https://okokfun.github.io/post/8-2%E6%B1%82%E5%92%8C%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:17:24 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-2%E6%B1%82%E5%92%8C%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8.1比较器</title>
      <link>https://okokfun.github.io/post/8-1%E6%AF%94%E8%BE%83%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 18:17:13 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/8-1%E6%AF%94%E8%BE%83%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.5运算放大器的补偿</title>
      <link>https://okokfun.github.io/post/7-5%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E8%A1%A5%E5%81%BF/</link>
      <pubDate>Fri, 14 Jul 2023 18:16:59 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-5%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E8%A1%A5%E5%81%BF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.4正反馈和稳定性</title>
      <link>https://okokfun.github.io/post/7-4%E6%AD%A3%E5%8F%8D%E9%A6%88%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7/</link>
      <pubDate>Fri, 14 Jul 2023 18:16:45 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-4%E6%AD%A3%E5%8F%8D%E9%A6%88%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.3运算放大器闭环响应</title>
      <link>https://okokfun.github.io/post/7-3%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E9%97%AD%E7%8E%AF%E5%93%8D%E5%BA%94/</link>
      <pubDate>Fri, 14 Jul 2023 18:16:34 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-3%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E9%97%AD%E7%8E%AF%E5%93%8D%E5%BA%94/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.2运算放大器开环响应</title>
      <link>https://okokfun.github.io/post/7-2%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E5%BC%80%E7%8E%AF%E5%93%8D%E5%BA%94/</link>
      <pubDate>Fri, 14 Jul 2023 18:16:21 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-2%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E5%BC%80%E7%8E%AF%E5%93%8D%E5%BA%94/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7.1基本概念</title>
      <link>https://okokfun.github.io/post/7-1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 14 Jul 2023 18:16:09 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/7-1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.7故障检测</title>
      <link>https://okokfun.github.io/post/6-7%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Fri, 14 Jul 2023 18:15:54 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-7%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.6运放阻抗和噪声</title>
      <link>https://okokfun.github.io/post/6-6%E8%BF%90%E6%94%BE%E9%98%BB%E6%8A%97%E5%92%8C%E5%99%AA%E5%A3%B0/</link>
      <pubDate>Fri, 14 Jul 2023 18:15:40 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-6%E8%BF%90%E6%94%BE%E9%98%BB%E6%8A%97%E5%92%8C%E5%99%AA%E5%A3%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.5负反馈运放组态</title>
      <link>https://okokfun.github.io/post/6-5%E8%B4%9F%E5%8F%8D%E9%A6%88%E8%BF%90%E6%94%BE%E7%BB%84%E6%80%81/</link>
      <pubDate>Fri, 14 Jul 2023 18:15:27 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-5%E8%B4%9F%E5%8F%8D%E9%A6%88%E8%BF%90%E6%94%BE%E7%BB%84%E6%80%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.4负反馈</title>
      <link>https://okokfun.github.io/post/6-4%E8%B4%9F%E5%8F%8D%E9%A6%88/</link>
      <pubDate>Fri, 14 Jul 2023 18:15:17 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-4%E8%B4%9F%E5%8F%8D%E9%A6%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.3运放数据手册中的参数</title>
      <link>https://okokfun.github.io/post/6-3%E8%BF%90%E6%94%BE%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</link>
      <pubDate>Fri, 14 Jul 2023 17:41:00 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-3%E8%BF%90%E6%94%BE%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.2差分放大器</title>
      <link>https://okokfun.github.io/post/6-2%E5%B7%AE%E5%88%86%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:40:49 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-2%E5%B7%AE%E5%88%86%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6.1运算放大器介绍</title>
      <link>https://okokfun.github.io/post/6-1%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 14 Jul 2023 17:40:35 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/6-1%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.8IC功率放大器</title>
      <link>https://okokfun.github.io/post/5-8ic%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:40:23 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-8ic%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.7C类和D类功率放大器</title>
      <link>https://okokfun.github.io/post/5-7c%E7%B1%BB%E5%92%8Cd%E7%B1%BB%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:40:12 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-7c%E7%B1%BB%E5%92%8Cd%E7%B1%BB%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.6B类功率放大器</title>
      <link>https://okokfun.github.io/post/5-6b%E7%B1%BB%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:39:59 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-6b%E7%B1%BB%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.5A类功率放大器</title>
      <link>https://okokfun.github.io/post/5-5a%E7%B1%BB%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:39:41 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-5a%E7%B1%BB%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.4直接耦合放大器</title>
      <link>https://okokfun.github.io/post/5-4%E7%9B%B4%E6%8E%A5%E8%80%A6%E5%90%88%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:39:25 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-4%E7%9B%B4%E6%8E%A5%E8%80%A6%E5%90%88%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.3变压器耦合放大器</title>
      <link>https://okokfun.github.io/post/5-3%E5%8F%98%E5%8E%8B%E5%99%A8%E8%80%A6%E5%90%88%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:39:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-3%E5%8F%98%E5%8E%8B%E5%99%A8%E8%80%A6%E5%90%88%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.2RF放大器</title>
      <link>https://okokfun.github.io/post/5-2rf%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:38:59 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-2rf%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>5.1电容耦合放大器</title>
      <link>https://okokfun.github.io/post/5-1%E7%94%B5%E5%AE%B9%E8%80%A6%E5%90%88%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:38:49 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/5-1%E7%94%B5%E5%AE%B9%E8%80%A6%E5%90%88%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.8系统</title>
      <link>https://okokfun.github.io/post/4-8%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 14 Jul 2023 17:38:35 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-8%E7%B3%BB%E7%BB%9F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.7MOSFET开关电路</title>
      <link>https://okokfun.github.io/post/4-7mosfet%E5%BC%80%E5%85%B3%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 14 Jul 2023 17:38:25 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-7mosfet%E5%BC%80%E5%85%B3%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.6FET线性放大器</title>
      <link>https://okokfun.github.io/post/4-6fet%E7%BA%BF%E6%80%A7%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:38:15 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-6fet%E7%BA%BF%E6%80%A7%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.5MOSFET偏置</title>
      <link>https://okokfun.github.io/post/4-5mosfet%E5%81%8F%E7%BD%AE/</link>
      <pubDate>Fri, 14 Jul 2023 17:38:02 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-5mosfet%E5%81%8F%E7%BD%AE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.4MOSFET特性</title>
      <link>https://okokfun.github.io/post/4-4mosfet%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 14 Jul 2023 17:37:50 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-4mosfet%E7%89%B9%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.3JFET偏置</title>
      <link>https://okokfun.github.io/post/4-3jfet%E5%81%8F%E7%BD%AE/</link>
      <pubDate>Fri, 14 Jul 2023 17:37:37 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-3jfet%E5%81%8F%E7%BD%AE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.2JFET特性</title>
      <link>https://okokfun.github.io/post/4-2jfet%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 14 Jul 2023 17:37:26 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-2jfet%E7%89%B9%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.1FET的结构</title>
      <link>https://okokfun.github.io/post/4-1fet%E7%9A%84%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 14 Jul 2023 17:37:12 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/4-1fet%E7%9A%84%E7%BB%93%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.9故障检测</title>
      <link>https://okokfun.github.io/post/3-9%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Fri, 14 Jul 2023 17:36:42 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-9%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.8晶体管封装及端口</title>
      <link>https://okokfun.github.io/post/3-8%E6%99%B6%E4%BD%93%E7%AE%A1%E5%B0%81%E8%A3%85%E5%8F%8A%E7%AB%AF%E5%8F%A3/</link>
      <pubDate>Fri, 14 Jul 2023 17:36:30 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-8%E6%99%B6%E4%BD%93%E7%AE%A1%E5%B0%81%E8%A3%85%E5%8F%8A%E7%AB%AF%E5%8F%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.7开关型双极型晶体管</title>
      <link>https://okokfun.github.io/post/3-7%E5%BC%80%E5%85%B3%E5%9E%8B%E5%8F%8C%E6%9E%81%E5%9E%8B%E6%99%B6%E4%BD%93%E7%AE%A1/</link>
      <pubDate>Fri, 14 Jul 2023 17:36:19 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-7%E5%BC%80%E5%85%B3%E5%9E%8B%E5%8F%8C%E6%9E%81%E5%9E%8B%E6%99%B6%E4%BD%93%E7%AE%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.6共基极放大器</title>
      <link>https://okokfun.github.io/post/3-6%E5%85%B1%E5%9F%BA%E6%9E%81%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:36:07 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-6%E5%85%B1%E5%9F%BA%E6%9E%81%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.5共集电极放大器</title>
      <link>https://okokfun.github.io/post/3-5%E5%85%B1%E9%9B%86%E7%94%B5%E6%9E%81%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:35:56 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-5%E5%85%B1%E9%9B%86%E7%94%B5%E6%9E%81%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.4共发射极放大器</title>
      <link>https://okokfun.github.io/post/3-4%E5%85%B1%E5%8F%91%E5%B0%84%E6%9E%81%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 17:35:43 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-4%E5%85%B1%E5%8F%91%E5%B0%84%E6%9E%81%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.3数据手册中的参数及交流分析</title>
      <link>https://okokfun.github.io/post/3-3%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E5%8F%8A%E4%BA%A4%E6%B5%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 14 Jul 2023 17:35:32 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-3%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E5%8F%8A%E4%BA%A4%E6%B5%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.2BJT偏置电路</title>
      <link>https://okokfun.github.io/post/3-2bjt%E5%81%8F%E7%BD%AE%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 14 Jul 2023 17:35:19 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-2bjt%E5%81%8F%E7%BD%AE%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.1BJT的结构</title>
      <link>https://okokfun.github.io/post/3-1bjt%E7%9A%84%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 14 Jul 2023 17:35:07 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/3-1bjt%E7%9A%84%E7%BB%93%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.10故障检测</title>
      <link>https://okokfun.github.io/post/2-10%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Fri, 14 Jul 2023 15:07:06 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-10%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.9二极管数据手册</title>
      <link>https://okokfun.github.io/post/2-9%E4%BA%8C%E6%9E%81%E7%AE%A1%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C/</link>
      <pubDate>Fri, 14 Jul 2023 15:06:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-9%E4%BA%8C%E6%9E%81%E7%AE%A1%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.8特殊用途二极管</title>
      <link>https://okokfun.github.io/post/2-8%E7%89%B9%E6%AE%8A%E7%94%A8%E9%80%94%E4%BA%8C%E6%9E%81%E7%AE%A1/</link>
      <pubDate>Fri, 14 Jul 2023 15:06:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-8%E7%89%B9%E6%AE%8A%E7%94%A8%E9%80%94%E4%BA%8C%E6%9E%81%E7%AE%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.7二极管限幅电路和钳位电路</title>
      <link>https://okokfun.github.io/post/2-7%E4%BA%8C%E6%9E%81%E7%AE%A1%E9%99%90%E5%B9%85%E7%94%B5%E8%B7%AF%E5%92%8C%E9%92%B3%E4%BD%8D%E7%94%B5%E8%B7%AF/</link>
      <pubDate>Fri, 14 Jul 2023 15:06:10 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-7%E4%BA%8C%E6%9E%81%E7%AE%A1%E9%99%90%E5%B9%85%E7%94%B5%E8%B7%AF%E5%92%8C%E9%92%B3%E4%BD%8D%E7%94%B5%E8%B7%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.6整流滤波器和IC稳压器</title>
      <link>https://okokfun.github.io/post/2-6%E6%95%B4%E6%B5%81%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%92%8Cic%E7%A8%B3%E5%8E%8B%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 15:05:51 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-6%E6%95%B4%E6%B5%81%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%92%8Cic%E7%A8%B3%E5%8E%8B%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.5整流器</title>
      <link>https://okokfun.github.io/post/2-5%E6%95%B4%E6%B5%81%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 15:05:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-5%E6%95%B4%E6%B5%81%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.4二极管特性</title>
      <link>https://okokfun.github.io/post/2-4%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 14 Jul 2023 15:05:04 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-4%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%89%B9%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.3半导体二极管的偏置</title>
      <link>https://okokfun.github.io/post/2-3%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%9A%84%E5%81%8F%E7%BD%AE/</link>
      <pubDate>Fri, 14 Jul 2023 15:04:21 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-3%E5%8D%8A%E5%AF%BC%E4%BD%93%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%9A%84%E5%81%8F%E7%BD%AE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.2pn结</title>
      <link>https://okokfun.github.io/post/2-2pn%E7%BB%93/</link>
      <pubDate>Fri, 14 Jul 2023 15:03:21 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-2pn%E7%BB%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2.1半导体原子结构</title>
      <link>https://okokfun.github.io/post/2-1%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 14 Jul 2023 15:01:04 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/2-1%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.5故障检测</title>
      <link>https://okokfun.github.io/post/1-5%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Fri, 14 Jul 2023 14:59:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-5%E6%95%85%E9%9A%9C%E6%A3%80%E6%B5%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.4放大器</title>
      <link>https://okokfun.github.io/post/1-4%E6%94%BE%E5%A4%A7%E5%99%A8/</link>
      <pubDate>Fri, 14 Jul 2023 14:58:40 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-4%E6%94%BE%E5%A4%A7%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.3信号源</title>
      <link>https://okokfun.github.io/post/1-3%E4%BF%A1%E5%8F%B7%E6%BA%90/</link>
      <pubDate>Fri, 14 Jul 2023 14:58:21 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-3%E4%BF%A1%E5%8F%B7%E6%BA%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.2模拟信号</title>
      <link>https://okokfun.github.io/post/1-2%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Fri, 14 Jul 2023 14:57:45 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-2%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1.1模拟电子学</title>
      <link>https://okokfun.github.io/post/1-1%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E5%AD%A6/</link>
      <pubDate>Wed, 12 Jul 2023 22:05:41 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/1-1%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E5%AD%A6/</guid>
      <description>1.1 模拟电子学 模拟信号: 我们测量到的自然现象的特性(比如,压力，流速和温度)都来源于模拟信号
信号可分为有 二进制数字 表示的数字信号和有 连续变化量 表示的模拟信号
模拟电子学包括所有其他(非数字)信号，它包括信号处理功能，比如放大,微分和集成等。
1.1.1 线型方程 线型方程式:
$$ y = mx + b $$
式中，y是因变量，x自变量，m是斜率，b是y轴上的截距。 欧姆定理：
$$ I=V/R $$
电流(I)是因变量，自变量是电压(V),斜率是电阻的倒数(1/R), 也就是电导.欧姆定律可变化为：
$$ I=GV $$
特性曲线是能够反应一个器件两个变化特性之间关系的图</description>
    </item>
    
    <item>
      <title>数字电子技术</title>
      <link>https://okokfun.github.io/post/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 12 Jul 2023 21:20:25 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/</guid>
      <description>第1章 基本概念 1.1 数字量与模拟量 1.2 二进制数、逻辑电平和数字波形 1.3 固定功能的集成电路 关键词 判断题 自测题 习题 答案
第2章 数字系统、运算和编码 2.1 十进制数 2.2 二进制数 2.3 十进制数到二进制数的转换 2.4 二进制算术 2.5 二进制数的反码和补码 2.6 带符号数 2.7 带符号数的算术运算 2.8 十六进制数 2.9 八进制数 2.10 二—十进制编码(BCD) 2.11 数字编码 2.12 错误检测码 关键词 判断题 自测题 习题 答案
第3章 逻辑门 3.1 反相器 3.2 与门 3.3 或门 3.4 与非门 3.5 或非门 3.6 异或门和同或门 3.7 固定功能逻辑 关键词 判断题 自测题 习题 答案
第4章 布尔代数和逻辑化简 4.1 布尔运算和表达式 4.</description>
    </item>
    
    <item>
      <title>模拟电子技术基础</title>
      <link>https://okokfun.github.io/post/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 12 Jul 2023 20:53:37 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</guid>
      <description>出版者的话 译者序 前言 第1章 基本模拟概念 ##### 1.1 模拟电子学 ##### 1.2 模拟信号 ##### 1.3 信号源 ##### 1.4 放大器 ##### 1.5 故障检测
第2章 二极管及其应用 ##### 2.1 半导体原子结构 ##### 2.2 pn结 ##### 2.3 半导体二极管的偏置 ##### 2.4 二极管特性 ##### 2.5 整流器 ##### 2.6 整流滤波器和IC稳压器 ##### 2.7 二极管限幅电路和钳位电路 ##### 2.8 特殊用途二极管 ##### 2.9 二极管数据手册 ##### 2.10 故障检测
第3章 BJT ##### 3.1 BJT的结构 ##### 3.2 BJT偏置电路 ##### 3.3 数据手册中的参数及交流分析 ##### 3.4 共发射极放大器 ##### 3.5 共集电极放大器 ##### 3.</description>
    </item>
    
    <item>
      <title>适用于Keil的插件合集</title>
      <link>https://okokfun.github.io/post/keil%E6%8F%92%E4%BB%B6%E5%90%88%E9%9B%86/</link>
      <pubDate>Tue, 11 Jul 2023 13:55:45 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/keil%E6%8F%92%E4%BB%B6%E5%90%88%E9%9B%86/</guid>
      <description>文件下载链接 https://github.com/txt1994/keil_plugs 本人收集的Keil插件，当然也可用于其他软件
1.AStyle 下载链接:
https://sourceforge.net/projects/astyle/files 1.1 AStyle可以对代码进行格式化分别是对单个文件格式化，命令： -n !E --style=google -s4 对多个文件格式化，但需要在同一个文件夹，命令：
-n &amp;#34;$E*.c&amp;#34; &amp;#34;$E*.h&amp;#34; --style=google -p -s4 -S -f -xW -w -xw -R 2.FileComments 2.1 FileComments可以对*.h和*.c进行快速添加注释，但需要模版文件，此文件在最下面提供下载，命令： !E 3.DateTime 3.1 DateTime可以识别当前日期和时间，用的不多，命令： 当前日期：
!E ~E ^E 当前时间：
!E ~E ^E T 4.FunctionComment 4.1 FunctionComment可以提供函数快速添加注释，命令： !E ~E 把这些插件添加到keil中，打开keil，依次点击Tools-&amp;gt;Customize Tools Menu,此时页面是这样的： 把上述的插件添加进去，Command是插件路径，Arguments是使用插件时的参数，可以根据需要自行定制
添加插件的快捷键：点击keil页面的小扳手，找到Shortcut Keys,把下拉框拉到刚才添加的插件处，右边是添加快键键的地方，添加后可以使用了</description>
    </item>
    
    <item>
      <title>第三部分-新的标准库组件</title>
      <link>https://okokfun.github.io/post/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E6%96%B0%E7%9A%84%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sat, 19 Mar 2022 00:01:15 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E6%96%B0%E7%9A%84%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6/</guid>
      <description>第三部分 新的标准库组件 本部分介绍了 C++17 的新库组件。
15 std::optional&amp;lt;&amp;gt; 在编程中，我们经常遇到可能返回/传递/使用某种类型的对象的情况。也就是说，我们可以有一个特定类型的值，或者我们可能根本没有任何值。因此，我们需要一种模拟类似于指针的语义的方法，我们可以通过使用 nullptr 来表示没有值。处理这个问题的方法是定义一个特定类型的对象，带有一个额外的布尔成员/标志，表明一个值是否存在。 std::optional&amp;lt;&amp;gt; 以类型安全的方式提供此类对象。
可选对象仅具有包含对象的内部存储器以及布尔标志。因此，大小通常比包含的对象大一个字节。对于某些包含的类型，甚至可能根本没有大小开销，前提是可以将附加信息放置在包含的对象中。没有分配堆内存。对象使用与包含类型相同的对齐方式。
但是，可选对象不仅仅是将布尔标志的功能添加到值成员的结构。例如，如果没有值，则不会为包含的类型调用构造函数（因此，您可以为对象提供没有的默认状态）。
与 std::variant&amp;lt;&amp;gt; 和 std::any 一样，结果对象具有值语义。也就是说，复制被实现为深度复制，创建一个独立的对象，带有标志和包含的值（如果有的话）在它自己的内存中。复制没有包含值的 std::optional&amp;lt;&amp;gt; 很便宜；复制带有包含值的 std::optional&amp;lt;&amp;gt; 与复制包含的类型/值一样便宜/昂贵。支持移动语义。
15.1 使用 std::optional&amp;lt;&amp;gt; std::optional&amp;lt;&amp;gt;模型是一个任意类型的可忽略的实例。这个实例可能是一个成员，一个参数，或者一个返回值。你也可以说，std::optional&amp;lt;&amp;gt;是一个容纳零或一个元素的容器。
15.1.1 可选的返回值 以下程序演示了 std::optional&amp;lt;&amp;gt; 用作返回值的能力： lib/optional.cpp
#include &amp;lt;optional&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; // 如果可能，将字符串转换为 int: std::optional&amp;lt;int&amp;gt; asInt(const std::string&amp;amp; s) { try { return std::stoi(s); } catch (...) { return std::nullopt; } } int main() { for (auto s : {&amp;#34;42&amp;#34;, &amp;#34; 077&amp;#34;, &amp;#34;hello&amp;#34;, &amp;#34;0x33&amp;#34;} ) { // 如果可能，尝试将 s 转换为 int 并打印结果: std::optional&amp;lt;int&amp;gt; oi = asInt(s); if (oi) { std::cout &amp;lt;&amp;lt; &amp;#34;convert &amp;#39;&amp;#34; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#34;&amp;#39; to int: &amp;#34; &amp;lt;&amp;lt; *oi &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } else { std::cout &amp;lt;&amp;lt; &amp;#34;can&amp;#39;t convert &amp;#39;&amp;#34; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#34;&amp;#39; to int\n&amp;#34;; } } } 在程序中 asInt() 是将传递的字符串转换为整数的函数。 但是，这可能不会成功。 出于这个原因，使用了 std::optional&amp;lt;&amp;gt; 以便我们可以返回&amp;quot;no int&amp;quot;并避免为其定义一个特殊的 int 值或向调用者抛出异常。 因此，我们要么返回调用 stoi() 的结果，它用一个 int 初始化返回值，要么我们返回 std::nullopt，表明我们没有一个 int 值。 我们可以实现如下相同的行为：</description>
    </item>
    
    <item>
      <title>第五部分-专业工具</title>
      <link>https://okokfun.github.io/post/%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E4%B8%93%E4%B8%9A%E5%B7%A5%E5%85%B7-/</link>
      <pubDate>Sat, 19 Mar 2022 00:01:15 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E4%B8%93%E4%B8%9A%E5%B7%A5%E5%85%B7-/</guid>
      <description>第五部分 专业工具 这部分介绍了普通应用程序程序员通常不必知道的新语言和库特性。 它可能涵盖基础库、特定模式或特殊环境中的程序员的工具。
27 多态的内存资源 (PMR) 自C++98以来，标准库就支持配置类分配其内部（堆）内存的方式的能力。由于这个原因，标准库中几乎所有分配内存的类型都有一个分配器参数。因此，你可以配置容器、字符串和其他类型分配其内部内存的方式，如果它们需要比堆栈上分配的空间更多的话。 分配这种内存的默认方式是从堆中分配。但是有不同的理由来修改这个默认行为：
你可以使用你自己的方式分配内存，以减少系统调用的数量。 你可以确保分配的内存位于彼此的旁边，以从CPU缓存中获益。 你可以把容器和它们的元素放在可供多进程使用的共享内存中。 你甚至可以重定向这些堆内存调用，以使用早期在堆栈上分配的内存。因此，可以有性能和功能方面的原因。 然而，在C++17之前，使用分配器（右）在很多方面都是既棘手又笨拙的（由于一些缺陷，太过复杂，以及与后向兼容的修改）。 现在，C++17为预定义和用户定义的内存分配方式提供了一个相当容易使用的方法，它可以用于标准类型和用户定义的类型。 基于这个原因，本章将讨论：
使用标准库提供的标准内存资源 定义自定义内存资源 为自定义类型提供内存资源支持 如果没有Pablo Halpern、Arthur O&amp;rsquo;Dwyer、David Sankel和Jonathan Wakely的大力帮助，本章就不可能完成。一些视频解释了这里提供的功能：
分配器：Pablo Halpern 的好零件 C++17 的 std::pmr 有代价 David Sankel 分配器是 Arthur O&amp;rsquo;Dwyer 的堆句柄 27.1 使用标准内存资源 本节介绍了标准内存资源以及如何使用它们。
27.1.1 激励性的例子 让我们首先比较一下没有和有标准内存资源的内存消耗。
为容器和字符串分配内存 假设在你的程序中，你有一个由一些字符串组成的向量，你用相当长的方式初始化这些字符串字符串：
pmr/pmr0.cpp #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;#34;../lang/tracknew.hpp&amp;#34; int main() { TrackNew::reset(); std::vector&amp;lt;std::string&amp;gt; coll; for (int i=0; i &amp;lt; 1000; ++i) { coll.emplace_back(&amp;#34;just a non-SSO string&amp;#34;); } TrackNew::status(); } 注意，我们使用一个类来跟踪内存分配的数量，该类跟踪所有用以下循环执行的::new调用：</description>
    </item>
    
    <item>
      <title>第四部分-标准库扩展和修改</title>
      <link>https://okokfun.github.io/post/%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E6%A0%87%E5%87%86%E5%BA%93%E6%89%A9%E5%B1%95%E5%92%8C%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Sat, 19 Mar 2022 00:01:15 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E6%A0%87%E5%87%86%E5%BA%93%E6%89%A9%E5%B1%95%E5%92%8C%E4%BF%AE%E6%94%B9/</guid>
      <description>第四部分 标准库扩展和修改 这一部分介绍了用C++17对现有库组件的扩展和修改。
21类型特征扩展 关于类型特征（标准类型函数），C++17扩展了使用它们的一般能力，并且 引入了一些新的类型特征。
21.1 类型特征的Suffix _v 从C++17开始，你可以对所有产生数值的类型特征使用后缀_v（因为你可以对所有产生类型的类型特征使用后缀_t）。例如，对于任何类型的T，而不是
std::is_const&amp;lt;T&amp;gt;::value 你现在可以写:
std::is_const_v&amp;lt;T&amp;gt; // since C++17 这适用于所有类型特征。其方法是，为每个标准类型特征定义一个相应的 变量模板。比如说:
namespace std { template&amp;lt;typename T&amp;gt; constexpr bool is_const_v = is_const&amp;lt;T&amp;gt;::value; } 通常，这有助于制定布尔条件，你可以在运行时使用:
if (std::is_signed_v&amp;lt;char&amp;gt;) { ... } 但由于类型特征是在编译时评估的，所以你可以在编译时使用编译时的结果，即compile-time if:
if constexpr (std::is_signed_v&amp;lt;char&amp;gt;) { ... } 或在实例化模板时:
// C&amp;lt;T&amp;gt;类的主要模板 template&amp;lt;typename T, bool = std::is_pointer_v&amp;lt;T&amp;gt;&amp;gt; class C { ... }; // 指针类型的部分特殊化。 template&amp;lt;typename T&amp;gt; class C&amp;lt;T, true&amp;gt; { ... }; 在这里，以C类为例，它为指针类型提供了一个特殊的实现。 但是如果类型特征产生一个非布尔值，后缀_v也可以使用，比如std::extreme&amp;lt;&amp;gt;。它产生的是一个原始数组的维度大小:
int a[5][7]; std::cout &amp;lt;&amp;lt; std::extent_v&amp;lt;decltype(a)&amp;gt; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; // prints 5 std::cout &amp;lt;&amp;lt; std::extent_v&amp;lt;decltype(a),1&amp;gt; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; // prints 7 21.</description>
    </item>
    
    <item>
      <title>第二部分-模板特性</title>
      <link>https://okokfun.github.io/post/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%A8%A1%E6%9D%BF%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sat, 19 Mar 2022 00:01:14 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%A8%A1%E6%9D%BF%E7%89%B9%E6%80%A7/</guid>
      <description>第二部分: 模板特性 9 类模板参数推导 C++17之前，你必须显式指定类模板的所有模板参数类型。比如，你不能忽略这里的double：
std::complex&amp;lt;double&amp;gt; c{5.1,3.3}; 也不能忽略第二次的std::mutex：
std::mutex mx; std::lock_guard&amp;lt;std::mutex&amp;gt; lg(mx); C++17开始，必须显式指定类模板的所有模板参数类型这个限制变得宽松了。有了类模板参数推导（class template argument deduction，CTAD）技术，如果构造函数可以推导出所有模板参数，那么你可以跳过显式指定模板实参。
比如：
你可以这样声明： std::complex c{5.1,3.3}; // 好的：推断出 std::complex&amp;lt;double&amp;gt; 你可以这样实现： std::mutex mx; std::lock_guard lg{mx}; // OK: 推断出 std::lock_guard&amp;lt;std_mutex&amp;gt; 你甚至可以让容器推导其元素的类型： std::vector v1 {1, 2, 3} // OK: 推断出 std::vector&amp;lt;int&amp;gt; std::vector v2 {&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;}; // OK: 推断出 std::vector&amp;lt;const char*&amp;gt; 9.1 类模板参数推导的使用 只要传给构造函数的实参可以用来推导类型模板参数，那么就可以使用类模板参数推导技术。该技术支持所有初始化方式：
std::complex c1{1.1, 2.2}; // 推断出 std::complex&amp;lt;double&amp;gt; std::complex c2(2.2, 3.3); // 推断出 std::complex&amp;lt;double&amp;gt; std::complex c3 = 3.3; // 推断出 std::complex&amp;lt;double&amp;gt; std::complex c4 = {4.</description>
    </item>
    
    <item>
      <title>QT文档翻译</title>
      <link>https://okokfun.github.io/post/qt%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Wed, 23 Feb 2022 23:08:02 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/qt%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/</guid>
      <description>此文档来自于👉 QtDocumentCN/QtDocumentCN: Qt中文文档翻译 (github.com)
并由本人补充了一些文档</description>
    </item>
    
    <item>
      <title>左值和右值</title>
      <link>https://okokfun.github.io/post/%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC/</link>
      <pubDate>Sun, 20 Feb 2022 16:30:47 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC/</guid>
      <description>左值有地址和值，可以出现在赋值运算符左边或者右边。
右值只有值，只能出现在赋值运算符右边。
右值只有值，没有地址， 右值是一个优化技巧（C++)，因为右值往往是临时变量的。
左值代表另一个值，右值是值本身。</description>
    </item>
    
    <item>
      <title>并发_并行_同步_异步</title>
      <link>https://okokfun.github.io/post/%E5%B9%B6%E5%8F%91-%E5%B9%B6%E8%A1%8C-%E5%90%8C%E6%AD%A5-%E5%BC%82%E6%AD%A5/</link>
      <pubDate>Sun, 20 Feb 2022 16:23:26 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E5%B9%B6%E5%8F%91-%E5%B9%B6%E8%A1%8C-%E5%90%8C%E6%AD%A5-%E5%BC%82%E6%AD%A5/</guid>
      <description> 并发：
​	计算机可以同时执行多个任务；单核处理器可以通过分配时间片的方式 单线程 并行：
针对多核处理器，不用用过分配时间片方式执行任务，少了线程的上下文切换 同步：
上一个任务执行完毕后才可以进行下一个任务，所以没有并发和并行概念 多线程同步（资源争抢） 异步：
不同任务不会相互等待，执行任务A时也可以在执行任务B，当任务A没有算出结果时，不会呆呆的等A，而是会去执行B，也有可能也同时执行C，D&amp;hellip;，等未来的某个时间A的结果返回也没问题。
同步里面没有并行和异步的概念，异步是一种任务执行序列，其应用可以在多线程并行、单线程并发 多线程的应用场景下，如果有资源竞争的情况，适合使用异步（单线程） </description>
    </item>
    
    <item>
      <title>Visual_Studio_2022_PRE添加OpenCV库</title>
      <link>https://okokfun.github.io/post/visual-studio-2022-pre%E6%B7%BB%E5%8A%A0opencv%E5%BA%93/</link>
      <pubDate>Sat, 19 Feb 2022 23:13:27 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/visual-studio-2022-pre%E6%B7%BB%E5%8A%A0opencv%E5%BA%93/</guid>
      <description>此篇是VS添加OpenCV库教程
1. 创建一个新工程 img img 2. 创建完工程后切到属性管理器 img 3. 添加新项目属性列表 然后切到Debug | x64添加新项目属性列表(P) img 然后双击新建的文件。
4. 添加库头文件路径和库文件路径 添加库头文件路径 img img 添加库文件路径
img 5. 填写要使用的库文件名 img 这里使用debug版
End.</description>
    </item>
    
    <item>
      <title>cmake编译opencv及Clion使用</title>
      <link>https://okokfun.github.io/post/cmake%E7%BC%96%E8%AF%91opencv%E5%8F%8Aclion%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 15 Feb 2022 19:21:35 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/cmake%E7%BC%96%E8%AF%91opencv%E5%8F%8Aclion%E4%BD%BF%E7%94%A8/</guid>
      <description>采用了linux下编译OpenCV, Visual Studio 2022, QT6.2.3都不成功。
最终采用在win下编译OpenCV + Clion成功，此文记录踩下的坑。
1. 下载OpenCV源码 源码地址👇
Github:
https://github.com/opencv/opencv/archive/4.5.5.zip
2. 编译OpenCV源码 解压文件夹 OpenCV源码 解压win下exe文件解压后由两个文件夹，source为源码目录 OpenCV源码 build为已经建好的库文件目录
OpenCV源码 CMake-gui工具构建
OpenCV源码 source code选择带有源码的目录，binaries选择一个新创建一个mingw-build目录，然后点击Configure，弹出的窗口选择MinGW Makefiles,第一次可能会失败，失败后再点击Configure，还不行的百度吧。 配置成功后点击Generate cd到mingw-bulid目录执行mingw32-make -j8,根据自己机器性能设置线程数，这里设置8个线程，编译时间较久，等待完成。 然后执行mingw32-make install生成库，在mingw-build生成install保存了生成库库文件和头文件。 3. 后续配置 把C:\\Users\\用户名\\Downloads\\opencv\\mingw-build\\install\\x64\\mingw\\bin路径添加到win的环境变量
👇此为一个CMakeLists.txt
cmake_minimum_required(VERSION 3.19) project(opencv_learn) set(CMAKE_CXX_STANDARD 20) include_directories($ENV{CMAKE_INCLUDE_PATH}) set(OpenCV_DIR C:\\Users\\用户名\\Downloads\\opencv\\mingw-build\\install\\x64\\mingw\\bin) #需要的openCV库 FIND_PACKAGE(OpenCV REQUIRED) #显示OpenCV的版本号 MESSAGE(&amp;#34;OpenCV version : ${OpenCV_VERSION}&amp;#34;) MESSAGE(&amp;#34;OpenCV include : ${OpenCV_INCLUDE_DIRS}&amp;#34;) MESSAGE(&amp;#34;OpenCV libs11 : ${OpenCV_LIBS}&amp;#34;) MESSAGE(&amp;#34;OpenCV DIR : ${OpenCV_DIR}&amp;#34;) include_directories(${OpenCV_INCLUDE_DIRS}) link_directories(${OpenCV_LIBS}) MESSAGE(&amp;#34;OpenCV libs : ${OpenCV_LIBS}&amp;#34;) include_directories(${OpenCV_INCLUDE_DIRS}) link_directories(${OpenCV_LIBS}) set(SOURCE main.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;计时器</title>
      <link>https://okokfun.github.io/post/c&#43;&#43;%E8%AE%A1%E6%97%B6%E5%99%A8/</link>
      <pubDate>Thu, 10 Feb 2022 17:01:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c&#43;&#43;%E8%AE%A1%E6%97%B6%E5%99%A8/</guid>
      <description>此文来自于👉由UP主神经元猫 神经元猫的个人空间_哔哩哔哩_bilibili 翻译 【63】【Cherno C++】【中字】C++的计时_哔哩哔哩_bilibili ，并由我整理。
C++计时器
std::chrono::high_resolution_clock高分辨率时钟在不同标准库有所区别，尽量不要使用。
对时长度量使用 steady_clock 对壁钟时间使用 system_clock 。 基础计时器
#include &amp;lt;iostream&amp;gt; #include &amp;lt;chrono&amp;gt; #include &amp;lt;thread&amp;gt; int main(void) { auto start = std::chrono::steady_clock::now(); std::this_thread::sleep_for(std::chrono::seconds(1)); auto end = std::chrono::steady_clock::now(); std::chrono::duration&amp;lt;float&amp;gt; time = end - start; std::cout &amp;lt;&amp;lt; time.count() &amp;lt;&amp;lt; &amp;#34;s \n&amp;#34;; std::cin.get(); } 计算打印hello用时
struct Timer { std::chrono::time_point&amp;lt;std::chrono::steady_clock&amp;gt; start, end; std::chrono::duration&amp;lt;float&amp;gt; duration; Timer() { start = std::chrono::steady_clock::now(); } ~Timer() { end = std::chrono::steady_clock::now(); duration = end - start; float ms = duration.</description>
    </item>
    
    <item>
      <title>让字符串及字符操作更加快速</title>
      <link>https://okokfun.github.io/post/%E8%AE%A9%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E5%AD%97%E7%AC%A6%E6%93%8D%E4%BD%9C%E6%9B%B4%E5%8A%A0%E5%BF%AB%E9%80%9F/</link>
      <pubDate>Mon, 07 Feb 2022 17:25:55 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E8%AE%A9%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E5%AD%97%E7%AC%A6%E6%93%8D%E4%BD%9C%E6%9B%B4%E5%8A%A0%E5%BF%AB%E9%80%9F/</guid>
      <description>视频由up神经元猫 神经元猫的个人空间_哔哩哔哩_bilibili 翻译自 youtube.com/cherno 并发布到👉 【80】【Cherno C++】【中字】如何让C++字符串更快_哔哩哔哩_bilibili 并由我整理。
此本不会讲解为什么std::string会很慢和其背后的细节，只有些例子。
std::string的主要问题之一是 字符串格式化及字符串操作 时需要分配内存
bad例子：
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; static uint32_t s_AllocCount = 0; // 查看分配多少次内存和如何跟踪这些内存，需要重载new操作符 void* operator new(size_t size) { s_AllocCount++; std::cout &amp;lt;&amp;lt; &amp;#34;allocating: &amp;#34; &amp;lt;&amp;lt; size &amp;lt;&amp;lt; &amp;#34; bytes\n&amp;#34;; return malloc(size); } void PrintName(const std::string&amp;amp; name) { std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } int main(void) { std::string name = &amp;#34;Yan Chernikov&amp;#34;; std::string firstname = name.substr(0, 3); std::string lasttname = name.</description>
    </item>
    
    <item>
      <title>让C&#43;&#43;程序更快的运行</title>
      <link>https://okokfun.github.io/post/%E8%AE%A9c-%E7%A8%8B%E5%BA%8F%E6%9B%B4%E5%BF%AB%E7%9A%84%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Sun, 06 Feb 2022 21:27:50 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E8%AE%A9c-%E7%A8%8B%E5%BA%8F%E6%9B%B4%E5%BF%AB%E7%9A%84%E8%BF%90%E8%A1%8C/</guid>
      <description>视频由up神经元猫 神经元猫的个人空间_哔哩哔哩_bilibili 翻译自 youtube.com/cherno 并发布到👉 【79】【Cherno C++】【中字】如何让C++运行得更快_哔哩哔哩_bilibili 并由我整理。
通过编码方式利用多核或多处理器 ,利用这些线程，不只是让你的程序顺序执行一条条指令，而是把一些东西，推迟到不同的线程，甚至不是推迟，二十把东西分派到不同的线程，让计算机更快地处理这些东西。
每一个资源，每一个纹理模型，他们通常独立于彼此，意味着这是良好的多线程候选场景。
static std::mutex s_MeshesMutex; static void LoadMesh(std::vector&amp;lt;Ref&amp;lt;Mesh&amp;gt;&amp;gt;* meshes, std::string filepath) { auto mesh = Mesh::Load(filepath); std::lock_guard&amp;lt;std::mutex&amp;gt; lock(s_MeshesMutex); meshes.push_back(mesh); } void EditLayer::LoadMeshes() { std::ifstream stream(&amp;#34;src/Models.txt&amp;#34;); std::string line; std::vector&amp;lt;std::string&amp;gt; meshFilepaths; while (std::getline(stream, line)) meshFilepaths.push_back(line); #define ASYNC 1 #id ASYNC for (const auto&amp;amp; file : meshFilepaths) // std::launch::async告知std库创建一个线程处理。 // 我们需要保留std::async的返回值，如果不保留的话，因为它会被C++标准库摧毁，在摧毁时，标准库需要确保过程实际已被完成，这基本不是并行了，所以需要创建一个std::future的向量。 m_Futures.push_back(std::async(std::launch::async, LoadMesh, &amp;amp;m_Meshes, file)); #else for (const auto&amp;amp; file : meshFilepaths) m_Meshes.push_back(Mesh::Load(file)); } std::vector&amp;lt;std::future&amp;lt;void&amp;gt; m_Meshes; 通过把任务分派的不同的线程，资源加载速度由6.</description>
    </item>
    
    <item>
      <title>qt添加第三方库方法</title>
      <link>https://okokfun.github.io/post/qt%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 03 Feb 2022 14:14:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/qt%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%96%B9%E6%B3%95/</guid>
      <description> qt添加第三方库方法
添加库 选择项目名右击
选择添加库
选择外部库，下一步 库文件填写库文件路径和库名字，包含路径是库头文件路径，平台选择一个或全部选择，链接选择动态，点击下一步 汇总将会显示添加到.pro文件中，在项目中可以添加头文件使用此库了 </description>
    </item>
    
    <item>
      <title>qt中ui简单介绍</title>
      <link>https://okokfun.github.io/post/qt%E4%B8%ADui%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 02 Feb 2022 20:07:01 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/qt%E4%B8%ADui%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>qt ui区别：
无ui的mainWindow.h #ifndef MAINWINDOW_H #define MAINWINDOW_H #include &amp;lt;QMainWindow&amp;gt; class MainWindow : public QMainWindow { Q_OBJECT public: MainWindow(QWidget *parent = nullptr); ~MainWindow(); }; #endif // MAINWINDOW_H 有ui的mainWindow.h #ifndef MAINWINDOW_H #define MAINWINDOW_H #include &amp;lt;QMainWindow&amp;gt; QT_BEGIN_NAMESPACE namespace Ui { class MainWindow; } QT_END_NAMESPACE // 这个MainWindow和下边的MainWindow没有关系，在不同命名空间内。 class MainWindow : public QMainWindow { Q_OBJECT public: MainWindow(QWidget *parent = nullptr); ~MainWindow(); private: Ui::MainWindow *ui;// ui的指针 }; #endif // MAINWINDOW_H 无ui的mainWindow.cpp #include &amp;#34;mainwindow.h&amp;#34; MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent) { } MainWindow::~MainWindow() { } 有ui的mainWindow.</description>
    </item>
    
    <item>
      <title>Qt概述</title>
      <link>https://okokfun.github.io/post/qt%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 01 Feb 2022 17:40:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/qt%E6%A6%82%E8%BF%B0/</guid>
      <description>1. Qt概述 1.1 什么是Qt Qt是一个跨平台的C++图形用户界面应用程序框架。它为应用程序开发者提供建立艺术级图形界面所需的所有功能。它是完全面向对象的，很容易扩展，并且允许真正的组件编程。
1.2 Qt的发展史 1991年 Qt最早由奇趣科技开发
1996年 进入商业领域，它也是目前流行的Linux桌面环境KDE的基础
2008年 奇趣科技被诺基亚公司收购，Qt称为诺基亚旗下的编程语言
2012年 Qt又被Digia公司收购
2014年4月 跨平台的集成开发环境Qt Creator3.1.0发布，同年5月20日配发了Qt5.3正式版，至此Qt实现了对iOS、Android、WP等各平台的全面支持。
截至2022年1月31日Qt最新版本为 6.2.3
1.3 支持的平台 Windows – XP、Vista、Win7、Win8、Win2008、Win10、Win11
Uinux/X11 – Linux、Sun Solaris、HP-UX、Compaq Tru64 UNIX、IBM AIX、SGI IRIX、FreeBSD、BSD/OS、和其他很多X11平台
Macintosh – Mac OS X
Embedded – 有帧缓冲支持的嵌入式Linux平台，Windows CE
1.4 Qt版本 Qt按照不同的版本发行，分为商业版和开源版
商业版 为商业软件提供开发，他们提供传统商业软件发行版，并且提供在商业有效期内的免费升级和技术支持服务。
开源的LGPL版本： 为了开发自有而设计的开放源码软件，它提供了和商业版本同样的功能，在GNU通用公共许可下，它是免费的。
1.5 Qt的下载与安装 下载地址： 现在QT有两种安装方式
在线安装：使用qt的安装器
https://download.qt.io/archive/online_installers/4.2/ 不同系统下载对应安装器,然后安装
离线安装
qt最后的一个离线安装版本是5.14.2,超过此版本是在线安装版，不提供整合二进制版本。
Linux Host 下载链接👉Qt 5.14.2 for Linux 64-bit ( 1.2G )
OS X Host 下载链接👉Qt 5.</description>
    </item>
    
    <item>
      <title>设计模式准则</title>
      <link>https://okokfun.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%87%86%E5%88%99/</link>
      <pubDate>Mon, 31 Jan 2022 18:56:20 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%87%86%E5%88%99/</guid>
      <description>最终目的：高内聚，低耦合 1. 开放封闭原则 (OCP,Open For Extension, Closed For Modification Principle) 😎类的改动是通过增加代码进行的，而不是修改源代码。
2. 单一职责原则 (SRP,Single Responsibility Principle) 类的职责要单一，对外只提供一种功能，而引起类变化的原因都应该只有一个。
3. 依赖倒置原则 (DIP,Dependence Inversion Principle) 😎依赖于抽象(接口),不要依赖具体的实现(类)，也就是针对接口编程。
4. 接口隔离原则 (ISP,Interface Segegation Principle) 不应该强迫客户的程序依赖他们不需要的接口方法。一个接口应该只提供一种对外功能，不应该把所有操作都封装到一个接口中去。
5. 里氏替换原则 (LSP, Liskov Substitution Principle) 任何抽象类出现的地方都可以用他的实现类进行替换。实际就是虚拟机制，语言级别实现面向对象功能。
6. 优先使用组合而不是继承原则(CARP,Composite/Aggregate Reuse Principle) 如果使用继承，会导致父类的任何变换都可能影响到子类的行为。 如果使用对象组合，就降低了这种依赖关系。
7. 迪米特法则(LOD,Law of Demeter) 😎一个对象应当对其他对象尽可能少的了解，从而降低各个对象之间的耦合，提高系统的可维护性。例如在一个程序中，各个模块之间相互调用时，通常会提供一个统一的接口来实现。这样其他模块不需要了解另外一个模块的内部实现细节，这样当一个模块内部的实现发生改变时，不会影响其他模块的使用。(黑盒原理)</description>
    </item>
    
    <item>
      <title>for和while的几种用法</title>
      <link>https://okokfun.github.io/post/for%E5%92%8Cwhile%E7%9A%84%E5%87%A0%E7%A7%8D%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 30 Jan 2022 21:10:45 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/for%E5%92%8Cwhile%E7%9A%84%E5%87%A0%E7%A7%8D%E7%94%A8%E6%B3%95/</guid>
      <description>三段式for循环 // 变量声明在for里面，自增在里面 for (int i = 0; i &amp;lt; 10; ++i) { //... } // 变量声明在外面,自增在里面 int i = 0; for (; i &amp;lt; 10; ) { //... ++i; } bool condition = true; int i = 0; for (; condition; ) { //... ++i; if (!(i &amp;lt; 5)) condition = false; } 无限循环版本
bool condition = true; int i = 0; for (; ; ) { //... ++i; if (!</description>
    </item>
    
    <item>
      <title>Visual-Studio-2022基本设置</title>
      <link>https://okokfun.github.io/post/visual-studio-2022%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 30 Jan 2022 19:14:50 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/visual-studio-2022%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</guid>
      <description>用微软家的Visual Studio 2022创建项目，为了避免文件混乱，可以采用下边的设置方法,当然也可以使用默认的设置。
点击解决方案下的项目名，例如sendbox👇
在弹出的对话窗中点击属性👇
然后在弹出的对话框中👇，选择所有配置,平台选择所有平台
上图有一个错误去掉bin前面的\.
配置属性-&amp;gt;常规，
在常规属性-&amp;gt;输出目录填写$(SolutionDir)bin\$(Platform)\$(Configuration)\
在常规属性-&amp;gt;中间目录填写$(SolutionDir)bin\intermediates\$(Platform)\$(Configuration)\
其中Platform根据平台选择不同而不同，比如选择x64,那么Platform就是Win64，还有Win32
设置完点击项目，选择清理，然后重新生成
编译器语言标准
配置属性-&amp;gt;常规-&amp;gt;C++语言标准
C++标准 配置属性-&amp;gt;常规-&amp;gt;C语言标准
C标准 End.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;单一变量存放多种类型的数据</title>
      <link>https://okokfun.github.io/post/c-%E5%8D%95%E4%B8%80%E5%8F%98%E9%87%8F%E5%AD%98%E6%94%BE%E5%A4%9A%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sat, 29 Jan 2022 22:33:43 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E5%8D%95%E4%B8%80%E5%8F%98%E9%87%8F%E5%AD%98%E6%94%BE%E5%A4%9A%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description> 此文来源于👉 【77】【Cherno C++】【中字】单一变量存放多种类型的数据_哔哩哔哩_bilibili
用来处理可能存在也可能不存在的数据，也可能是与我们预期不同的类型。当然也不一定，而是让我们存储不同的数据。 std::variant的作用是让我们不用担心处理的确切类型，指定一个std::variant的东西，然后列出他可能的数据类型。 例子：
#include &amp;lt;iostream&amp;gt; #include &amp;lt;variant&amp;gt; int main(void) { std::variant&amp;lt;std::string, int&amp;gt; data; data = &amp;#34;Cherno&amp;#34;; std::cout &amp;lt;&amp;lt; std::get&amp;lt;std::string&amp;gt;(data) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; data = 2;// data被重新赋值为2 std::cout &amp;lt;&amp;lt; std::get&amp;lt;int&amp;gt;(data) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; data.index();// index函数会告诉你类型的索引， 此时会打印1。 if (auto value = std::get_if&amp;lt;int&amp;gt;(&amp;amp;data)) { std::string&amp;amp;v = *value; } else { //... } /* std::cout &amp;lt;&amp;lt; std::get&amp;lt;std::string&amp;gt;(data) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 错误的访问方法，在data被置为int后依旧按照std::string访问，会抛出一个 bad variant access异常 */ std::cin.get(); return 0; } </description>
    </item>
    
    <item>
      <title>C&#43;&#43;数据存在或不存在处理方法</title>
      <link>https://okokfun.github.io/post/c-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%9C%A8%E6%88%96%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 29 Jan 2022 21:22:58 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%9C%A8%E6%88%96%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</guid>
      <description>此文来源于👉 【76】【Cherno C++】【中字】如何处理OPTIONAL数据_哔哩哔哩_bilibili
有一个返回的函数， 比如正在读取一个文件，但是如果这个文件不能被读取，会发生什么，虽然读取失败，但我们仍然需要从函数中返回一些东西，返回一个空字符串没有意义。
如果文件是空的，应有办法看到数据存在或不存在，而std::optional可以给我们一些帮助，此特性在C++17加入。
非std::optional版本
例子：
#incldue &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; std::string ReadStringFromFile(const std::&amp;amp;string filepath, bool&amp;amp; outSuccess) { std::ifstream stream(filepath); if (stream) { std::string result; // read file stream.close(); outSuccess = true; return result; } outSuccess = false; return {}; } int main(void) { bool fileOpenedSuccessfully; std::string data = ReadStringFromFile(&amp;#34;data.txt&amp;#34;, fileOpenedSuccessfully); if (fileOpenedSuccessfully) { //... } else { //... } return 0; } std::optional版本
#include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;optional&amp;gt; std::optional&amp;lt;std::string&amp;gt; ReadStringFromFile(const std::string&amp;amp; filepath) { std::ifstream stream(filepath); if (stream) { std::string result; // read file stream.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;元组与对组</title>
      <link>https://okokfun.github.io/post/c-%E5%85%83%E7%BB%84%E4%B8%8E%E5%AF%B9%E7%BB%84/</link>
      <pubDate>Sat, 29 Jan 2022 17:41:10 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E5%85%83%E7%BB%84%E4%B8%8E%E5%AF%B9%E7%BB%84/</guid>
      <description>来自于👉 tuple - C++ Reference (cplusplus.com) 并整理
一个元组std::tuple是一个能够容纳 元素集合 的对象。每个元素都可以是 不同的类型。
std::make_pair()可以构建一个配对对象，其第一个元素设置为x，第二个元素设置为y，并返回。
std::tie可以绑定std::tuple&amp;lt;T,T,T,...&amp;gt;的实例，并分别给这些元素起别名
std::tuple 所在头文件 &amp;lt;tuple&amp;gt;
例子：
// tuple example #include &amp;lt;iostream&amp;gt; // std::cout #include &amp;lt;tuple&amp;gt; // std::tuple, std::get, std::tie, std::ignore int main () { std::tuple&amp;lt;int,char&amp;gt; foo (10,&amp;#39;x&amp;#39;); auto bar = std::make_tuple (&amp;#34;test&amp;#34;, 3.1, 14, &amp;#39;y&amp;#39;); std::cout &amp;lt;&amp;lt; &amp;#34;bar has &amp;#34;&amp;lt;&amp;lt;std::tuple_size&amp;lt;decltype(bar)&amp;gt;::value &amp;lt;&amp;lt; elements&amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; std::tuple_element&amp;lt;0,decltype(bar)&amp;gt;::type first = std::get&amp;lt;0&amp;gt;(bar); std::cout &amp;lt;&amp;lt; &amp;#34;bar contains: &amp;#34; &amp;lt;&amp;lt; first &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; std::get&amp;lt;2&amp;gt;(bar) = 100; // access element int myint; char mychar; std::tie (myint, mychar) = foo; // unpack elements std::tie (std::ignore, std::ignore, myint, mychar) = bar; // unpack (with ignore) mychar = std::get&amp;lt;3&amp;gt;(bar); std::get&amp;lt;0&amp;gt;(foo) = std::get&amp;lt;2&amp;gt;(bar); std::get&amp;lt;1&amp;gt;(foo) = mychar; std::cout &amp;lt;&amp;lt; &amp;#34;foo contains: &amp;#34;; std::cout &amp;lt;&amp;lt; std::get&amp;lt;0&amp;gt;(foo) &amp;lt;&amp;lt; &amp;#39; &amp;#39;; std::cout &amp;lt;&amp;lt; std::get&amp;lt;1&amp;gt;(foo) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; return 0; } 答案：</description>
    </item>
    
    <item>
      <title>C&#43;&#43;结构化绑定</title>
      <link>https://okokfun.github.io/post/c-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Sat, 29 Jan 2022 17:40:33 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A/</guid>
      <description> 此文总结与👉 神经元猫的个人空间_哔哩哔哩_bilibili 的 【75】【Cherno C++】【中字】C++的结构化绑定_哔哩哔哩_bilibili
在如何处理C++多返回值得问题，返回的数据可以是结构体实例，也可以是元组或对组 从C++17引入的结构化绑定可以改善此项，
以前忒麻烦的版本
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;tuple&amp;gt; std::tuple&amp;lt;std::string, int&amp;gt; CreatPerson() { return { &amp;#34;Cherno&amp;#34;, 24 }; } int main(void) { auto person = CreatPerson(); std::string&amp;amp;name = std::get&amp;lt;0&amp;gt;(person); int age = std::get&amp;lt;1&amp;gt;(person); std::string name; int age; std::tie(name, age) = CreatPerson(); return 0; } 从C++17引入了结构化绑定解决了上诉问题
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;tuple&amp;gt; std::tuple&amp;lt;std::string, int&amp;gt; CreatPerson() { return { &amp;#34;Cherno&amp;#34;, 24 }; } int main(void) { auto[name, age] = CreatPerson(); // 简单，美观 std::cout &amp;lt;&amp;lt; name; return 0; } </description>
    </item>
    
    <item>
      <title>获取C&#43;&#43;中数据的类型的方法</title>
      <link>https://okokfun.github.io/post/%E8%8E%B7%E5%8F%96c-%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 28 Jan 2022 17:51:19 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E8%8E%B7%E5%8F%96c-%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>此文来自于👉 C++ / typeinfo — DevDocs ，并整理
判断数据是哪种数据类型 头文件&amp;lt;typeinfo&amp;gt;
std::type_info::name() 例子：
#include &amp;lt;iostream&amp;gt; #include &amp;lt;typeinfo&amp;gt; struct Base { virtual ~Base() = default; }; struct Derived : Base {}; int main() { Base b1; Derived d1; const Base *pb = &amp;amp;b1; std::cout &amp;lt;&amp;lt; typeid(*pb).name() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; pb = &amp;amp;d1; std::cout &amp;lt;&amp;lt; typeid(*pb).name() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; int i; int * pi; std::cout &amp;lt;&amp;lt; &amp;#34;int is: &amp;#34; &amp;lt;&amp;lt; typeid(int).name() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; std::cout &amp;lt;&amp;lt; &amp;#34; i is: &amp;#34; &amp;lt;&amp;lt; typeid(i).</description>
    </item>
    
    <item>
      <title>本人使用的hexo插件列表</title>
      <link>https://okokfun.github.io/post/%E6%9C%AC%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%9A%84hexo%E6%8F%92%E4%BB%B6%E5%88%97%E8%A1%A8/</link>
      <pubDate>Fri, 28 Jan 2022 14:14:03 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E6%9C%AC%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%9A%84hexo%E6%8F%92%E4%BB%B6%E5%88%97%E8%A1%A8/</guid>
      <description>文章emoji支持
npm install hexo-filter-github-emojis --save 文章加密访问插件
npm install hexo-blog-encrypt --save 使用方法
将 &amp;ldquo;password&amp;rdquo; 字段添加到您文章信息头就像这样. --- title: Hello World tags: - 作为日记加密 date: 2016-03-30 21:12:21 password: mikemessi abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容. --- password下边几行可加可不加。
编辑_config.yml 加入下列几行
# Security encrypt: # hexo-blog-encrypt abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码, 请点击本文字. tags: - {name: tagName, password: 密码A} - {name: tagName, password: 密码B} wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;新特性</title>
      <link>https://okokfun.github.io/post/c-%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 24 Jan 2022 17:02:47 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>1. Variadic Templates 数量不定的模板参数
...代表任意个数据
void print(){} template &amp;lt;typename T, typename... Types&amp;gt; void print(const T&amp;amp; firstArg, const Types&amp;amp;...args) { std::cout &amp;lt;&amp;lt; firstArg &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; print(args...); } void print(const T&amp;amp; firstArg, const Types&amp;amp;...args){}中...代表任意个数据，Types任意类型的数据,
表示接受任意个任意类型的数据
例子：
#include &amp;lt;iostream&amp;gt; #include &amp;lt;bitset&amp;gt; void print() {} template &amp;lt;typename T, typename... Types&amp;gt; void print(const T &amp;amp;firstArg, const Types &amp;amp;...args) { std::cout &amp;lt;&amp;lt; firstArg &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; print(args...); } int main(int argc, char *argv[]) { print(7.5, &amp;#34;hello&amp;#34;, std::bitset&amp;lt;16&amp;gt;(377), 42); return 0; } 结果：</description>
    </item>
    
    <item>
      <title>QT_UI组件库</title>
      <link>https://okokfun.github.io/post/qt-ui%E7%BB%84%E4%BB%B6%E5%BA%93/</link>
      <pubDate>Mon, 24 Jan 2022 14:33:42 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/qt-ui%E7%BB%84%E4%BB%B6%E5%BA%93/</guid>
      <description>QT组件库第1-31 QT组件库第32-56 Layouts 布局组件库 1号 Vertical Layout 垂直布局
2号 Horizontal Layout 水平布局
3号 Grid Layout 网格布局
4号 Form Layout 表单布局
Spacers 空间间隔组(弹簧) 5号 Horizontal Spacer 水平间隔
6号 Vertical Spacer 垂直间隔
Buttons 按钮 7号 Push Button 8号 Tool Button 9号 Radio Button 10号 Check Box 11号 Command Link Button 12号 Dialog Button Box Item Views (Model-Based) 清单视图组 13号 List View 清单视图
14号 Tree View 树视图
15号 Table View 表视图
16号 Column View 列视图</description>
    </item>
    
    <item>
      <title>Me</title>
      <link>https://okokfun.github.io/post/me/</link>
      <pubDate>Mon, 24 Jan 2022 13:37:38 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/me/</guid>
      <description>安乐死是对人最后的仁慈，让人可以有尊严和最后无痛苦的离开这个世界，当然前提是有病痛且无法医治，比如物理学家霍金的 肌萎缩性脊髓侧索硬化症（ALS）。</description>
    </item>
    
    <item>
      <title>模板</title>
      <link>https://okokfun.github.io/post/%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Sun, 23 Jan 2022 19:49:07 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E6%A8%A1%E6%9D%BF/</guid>
      <description>本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层的使用
1 模板 1.1 模板的概念 模板就是建立通用的模具，大大提高复用性
模板的特点：
模板不可以直接使用，它只是一个框架 模板的通用并不是万能的 1.2 函数模板 C++另一种编程思想称为 泛型编程 ，主要利用的技术就是模板
C++提供两种模板机制:函数模板和类模板
1.2.1 函数模板语法 函数模板作用：
建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。
语法：
template&amp;lt;typename T&amp;gt; 函数声明或定义 解释：
template &amp;mdash; 声明创建模板
typename &amp;mdash; 表面其后面的符号是一种数据类型，可以用class代替
T &amp;mdash; 通用的数据类型，名称可以替换，通常为大写字母
示例：
//交换整型函数 void swapInt(int&amp;amp; a, int&amp;amp; b) { int temp = a; a = b; b = temp; } //交换浮点型函数 void swapDouble(double&amp;amp; a, double&amp;amp; b) { double temp = a; a = b; b = temp; } //利用模板提供通用的交换函数 template&amp;lt;typename T&amp;gt; void mySwap(T&amp;amp; a, T&amp;amp; b) { T temp = a; a = b; b = temp; } void test01() { int a = 10; int b = 20; //swapInt(a, b); //利用模板实现交换 //1、自动类型推导 mySwap(a, b); //2、显示指定类型 mySwap&amp;lt;int&amp;gt;(a, b); cout &amp;lt;&amp;lt; &amp;#34;a = &amp;#34; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;#34;b = &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl; } int main() { test01(); system(&amp;#34;pause&amp;#34;); return 0; } 总结：</description>
    </item>
    
    <item>
      <title>github资源资源下载加速</title>
      <link>https://okokfun.github.io/post/github%E8%B5%84%E6%BA%90%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Wed, 19 Jan 2022 23:46:32 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/github%E8%B5%84%E6%BA%90%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/</guid>
      <description> 由于大家都知道原因，国内使用github下载源码和Releases文件时都慢如龟速 下边根据我所使用的方法介绍几种方法
1. 通过命令行克隆源码 通过添加.cnpmjs.org 在
git clone https://github.com/MistEO/MeoAssistantArknights.git 的.com后边添加.cnpmjs.org
git clone https://github.com.cnpmjs.org/MistEO/MeoAssistantArknights.git 通过替换为hub.fastgit.org 喜欢的话请他喝杯茶捐赠相关 | FastGit UK Document
在
git clone https://github.com/MistEO/MeoAssistantArknights.git 中把github.com替换为hub.fastgit.org
git clone https://hub.fastgit.org/MistEO/MeoAssistantArknights.git 2. 通过浏览器下载资源 下载例如源码zip包，releases文件。
下载源码zip包 把
https://github.com/MistEO/MeoAssistantArknights/archive/refs/heads/master.zip 中的github.com替换为download.fastgit.org
https://download.fastgit.org/MistEO/MeoAssistantArknights/archive/refs/heads/master.zip 下载二进制releases文件 此为个人项目喜欢的话请他喝杯茶GitHub Proxy 代理加速 (ghproxy.com)
通过添加https://ghproxy.com/ 把
https://github.com//MistEO/MeoAssistantArknights/releases/download/v2.7.9/MeoAssistantArknights_v2.7.9.zip 在https://github添加https://ghproxy.com/
https://ghproxy.com/https://github.com//MistEO/MeoAssistantArknights/releases/download/v2.7.9/MeoAssistantArknights_v2.7.9.zip </description>
    </item>
    
    <item>
      <title>容器适配器</title>
      <link>https://okokfun.github.io/post/%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/</link>
      <pubDate>Wed, 19 Jan 2022 16:53:19 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/</guid>
      <description>容器适配器提供顺序容器的不同接口
std::stack 定义于头文件 &amp;lt;stack&amp;gt; std::stack 类是容器适配器，它给予程序员栈的功能——特别是 FILO （先进后出）数据结构。
该类模板表现为底层容器的包装器——只提供特定函数集合。栈从被称作栈顶的容器尾部推弹元素。
元素访问 top 访问栈顶元素 (公开成员函数) 容量 empty 检查底层容器是否为空 (公开成员函数) size 返回容纳的元素数 (公开成员函数) 修改器 push 向栈顶插入元素 (公开成员函数) emplace(C++11) 在顶部原位构造元素 (公开成员函数) pop 删除栈顶元素 (公开成员函数) swap(C++11) 交换内容 (公开成员函数) std::queue 适配一个容器以提供队列（FIFO 数据结构） 定义于头文件 &amp;lt;queue&amp;gt;
std::queue 类是容器适配器，它给予程序员队列的功能——尤其是 FIFO （先进先出）数据结构。
类模板表现为底层容器的包装器——只提供特定的函数集合。 queue 在底层容器尾端推入元素，从首端弹出元素。
元素访问 front 访问第一个元素 (公开成员函数) back 访问最后一个元素 (公开成员函数) 容量 empty 检查底层容器是否为空 (公开成员函数) size 返回容纳的元素数 (公开成员函数) 修改器 push 向队列尾部插入元素 (公开成员函数) emplace(C++11) 在尾部原位构造元素 (公开成员函数) pop 删除首个元素 (公开成员函数) swap(C++11) 交换内容 (公开成员函数) std::priority_queue 定义于头文件 &amp;lt;queue&amp;gt; priority_queue 是容器适配器，它提供常数时间的（默认）最大元素查找，对数代价的插入与释出。</description>
    </item>
    
    <item>
      <title>关联容器</title>
      <link>https://okokfun.github.io/post/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 19 Jan 2022 16:53:07 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</guid>
      <description>此文整理与👉容器库 - cppreference.com
关联容器实现能快速查找（ O(log n) 复杂度）的数据结构。
std::set 定义于头文件 &amp;lt;set&amp;gt;
std::set 是关联容器，含有 Key 类型对象的已排序集并去重。用比较函数 比较 (Compare) 进行排序。搜索、移除和插入拥有对数复杂度。 set 通常以红黑树实现。
返回指向 set 首元素的迭代器。
若 set 为空，则返回的迭代器将等于 end() 。
返回值
指向首元素的迭代器。
复杂度 常数。
std::set&amp;lt;&amp;gt;::begin,std::set&amp;lt;&amp;gt;::cbegin #include &amp;lt;algorithm&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;set&amp;gt; int main() { std::set&amp;lt;int&amp;gt; set = { 3, 1, 4, 1, 5, 9, 2, 6, 5 }; std::for_each(set.cbegin(), set.cend(), [](int x) { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39; &amp;#39;; }); std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } std::set&amp;lt;Key,Compare,Allocator&amp;gt;::empty 检查容器是否无元素</description>
    </item>
    
    <item>
      <title>顺序容器</title>
      <link>https://okokfun.github.io/post/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 19 Jan 2022 16:52:52 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</guid>
      <description>顺序容器实现能按顺序访问的数据结构。
std::array 静态的连续数组
定义于头文件 &amp;lt;array&amp;gt;
std::array 是封装 固定大小数组 的容器。 隐式定义的成员函数 (构造函数)(隐式声明) 遵循聚合初始化的规则初始化 array （注意默认初始化可以导致非类的 T 的不确定值） (公开成员函数) (析构函数)(隐式声明) 销毁 array 的每个元素 (公开成员函数) operator=(隐式声明) 以来自另一 array 的每个元素重写 array 的对应元素 (公开成员函数) 元素访问 at(C++11) 访问指定的元素，同时进行越界检查 (公开成员函数) [operator](C++11) 访问指定的元素 (公开成员函数) front(C++11) 访问第一个元素 (公开成员函数) back(C++11) 访问最后一个元素 (公开成员函数) data(C++11) 直接访问底层数组 (公开成员函数) 迭代器 begincbegin(C++11) 返回指向起始的迭代器 (公开成员函数) endcend(C++11) 返回指向末尾的迭代器 (公开成员函数) rbegincrbegin(C++11) 返回指向起始的逆向迭代器 (公开成员函数) rendcrend(C++11) 返回指向末尾的逆向迭代器 (公开成员函数) 容量 empty(C++11) 检查容器是否为空 (公开成员函数) size(C++11) 返回容纳的元素数 (公开成员函数) max_size(C++11) 返回可容纳的最大元素数 (公开成员函数) 操作 fill(C++11) 以指定值填充容器 (公开成员函数) swap(C++11) 交换内容 std::vector 定义于头文件 &amp;lt;vector&amp;gt;</description>
    </item>
    
    <item>
      <title>日期和时间工具</title>
      <link>https://okokfun.github.io/post/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 18 Jan 2022 19:17:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7/</guid>
      <description>此文来源于👉日期和时间工具 - cppreference.com
日期和时间工具 std::chrono 库 时钟 时长 时间点 时钟 system_clock(C++11) 来自系统范畴实时时钟的挂钟时间 (类) steady_clock(C++11) 决不会调整的单调时钟 (类) high_resolution_clock(C++11) 拥有可用的最短嘀嗒周期的时钟 (类) is_clockis_clock_v(C++20) 确定类型是否为时钟 (Clock) (类模板) (变量模板) utc_clock(C++20) 协调世界时 (UTC) 的时钟 (Clock) (类) tai_clock(C++20) 国际原子时 (TAI) 的时钟 (Clock) (类) gps_clock(C++20) GPS 时间的时钟 (Clock) (类) file_clock(C++20) 用于文件时间的时钟 (Clock) (typedef) local_t(C++20) 表示本地时间的伪时钟 时间点 时间点是从特定时钟的纪元开始经过的时间时长。
定义于头文件 &amp;lt;chrono&amp;gt; 定义于命名空间 std::chrono time_point(C++11) 时间中的点 (类模板) clock_time_conversion(C++20) 定义如何转换一个时钟的时间点为另一个的特性类 (类模板) clock_cast(C++20) 转换一个时钟的时间点为另一个 (函数模板) 时长 时长由时间跨度组成，定义为某时间单位的某个计次数。例如，“ 42 秒”可表示为由 42 个 1 秒时间点位的计次所组成的时长。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;无序容器</title>
      <link>https://okokfun.github.io/post/c-%E6%97%A0%E5%BA%8F%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 18 Jan 2022 16:54:33 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E6%97%A0%E5%BA%8F%E5%AE%B9%E5%99%A8/</guid>
      <description>此文来自👉容器库 - cppreference.com
容器库是类模板与算法的汇集，允许程序员简单地访问常见数据结构，例如队列、链表和栈。有三类容器——顺序容器、关联容器和无序关联容器——每种都被设计为支持不同组的操作
无序关联容器提供能快速查找（均摊 O(1) ，最坏情况 O(n) 的复杂度）的无序（哈希）数据结构。
1. std::unordered_set 唯一键的集合，按照键生成散列
unordered_set 是含有 Key 类型唯一对象集合的关联容器。搜索、插入和移除拥有平均常数时间复杂度。
在内部，元素并 不以任何特别顺序排序，而是组织进桶中。元素被放进哪个桶完全依赖其值的哈希。这允许对单独元素的快速访问，因为哈希一旦确定，就准确指代元素被放入的桶。
不可修改容器元素（即使通过非 const 迭代器），因为修改可能 更改元素的哈希，并破坏容器。
例子 #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;unordered_set&amp;gt; int main() { // 创建三个 string 的 unordered_set（映射到 string ） std::unordered_set&amp;lt;std::string&amp;gt; u = { &amp;#34;RED&amp;#34;, &amp;#34;GREEN&amp;#34;, &amp;#34;BLUE&amp;#34; }; // 迭代并打印 unordered_set 的关键和值 for (const auto &amp;amp;n : u) { std::cout &amp;lt;&amp;lt; &amp;#34;Key:&amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } // // 添加新入口到 unordered_set // &amp;#34;BLACK&amp;#34;; // &amp;#34;WHITE&amp;#34;; u.</description>
    </item>
    
    <item>
      <title>动态内存管理</title>
      <link>https://okokfun.github.io/post/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 18 Jan 2022 13:20:39 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>此文取自于👉动态内存管理 - cppreference.com
std::unique_ptr 拥有独有对象所有权语义的智能指针
#include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;memory&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;functional&amp;gt; struct B { virtual void bar() { std::cout &amp;lt;&amp;lt; &amp;#34;B::bar\n&amp;#34;; } virtual ~B() = default; }; struct D : B { D() { std::cout &amp;lt;&amp;lt; &amp;#34;D::D\n&amp;#34;; } ~D() { std::cout &amp;lt;&amp;lt; &amp;#34;D::~D\n&amp;#34;; } void bar() override { std::cout &amp;lt;&amp;lt; &amp;#34;D::bar\n&amp;#34;; } }; // 消费 unique_ptr 的函数能以值或以右值引用接收它 std::unique_ptr&amp;lt;D&amp;gt; pass_through(std::unique_ptr&amp;lt;D&amp;gt; p) { p-&amp;gt;bar(); return p; } void close_file(std::FILE* fp) { std::fclose(fp); } int main() { std::cout &amp;lt;&amp;lt; &amp;#34;unique ownership semantics demo\n&amp;#34;; { auto p = std::make_unique&amp;lt;D&amp;gt;(); // p 是占有 D 的 unique_ptr auto q = pass_through(std::move(p)); assert(!</description>
    </item>
    
    <item>
      <title>C&#43;&#43;文件系统库</title>
      <link>https://okokfun.github.io/post/c-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BA%93/</link>
      <pubDate>Sun, 16 Jan 2022 15:16:11 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BA%93/</guid>
      <description> 此文来源于👉文件系统库 - cppreference.com，并整理。
库范畴定义 文件：持有数据的文件系统对象，能被写入或读取，或二者皆可。文件拥有名称及属性，属性之一是文件类型： 目录：表现为目录条目的容器的文件，目录条目标识其他文件（其中一些可以是另外的嵌套的目录）。讨论到具体文件时，包含该文件目录条目的目录是其父目录。父目录能以相对路径名 &amp;ldquo;..&amp;rdquo; 表示。 硬链接：关联一个名字到一个既存文件的目录条目。若支持多重硬链接，则文件在最后一个到它的硬链接被移除后才被移除。 符号链接：关联一个名词到一个路径的目录条目，路径可以存在亦可不存在。 常规文件：不是其他文件类型的文件。 文件名：命名一个文件的字符串。容许字符、大小写区别、最大长度以及被禁止名称是实现定义的。名称 &amp;ldquo;.&amp;rdquo; （点）与 &amp;ldquo;..&amp;rdquo; （双点）在库层次拥有特殊含义。 路径：标识一个文件的元素序列。它以可选的 根名 （例如 Windows 上的 &amp;ldquo;C:&amp;rdquo; 或 &amp;ldquo;//server&amp;rdquo; ）开始，后随可选的 根目录 （例如 Unix 上的 &amp;ldquo;/&amp;rdquo; ），后随零或更多个文件名（除了最后一个都必须是目录或到目录的链接）的序列。表示路径的字符串（路径名）的原生格式（如哪些字符被用作分隔符）与字符编码是实现定义的，库提供路径的可移植表示。 绝对路径：无歧义地标识一个文件位置的路径。 规范路径：不包含符号链接、 &amp;ldquo;.&amp;rdquo; 或 &amp;ldquo;..&amp;rdquo; 元素的绝对路径。 相对路径：标识相对于文件系统中某位置的文件位置的路径。特殊路径名 &amp;ldquo;.&amp;rdquo; （点，“当前目录”）和 &amp;ldquo;..&amp;rdquo; （双点、“父目录”）是相对路径。 类 定义于头文件 &amp;lt;filesystem&amp;gt; 定义于命名空间 std::filesystem path(C++17) 表示路径 (类) filesystem_error(C++17) 文件系统错误时抛出的异常 (类) directory_entry(C++17) 目录条目 (类) directory_iterator(C++17) 指向目录内容的迭代器 (类) recursive_directory_iterator(C++17) 指向一个目录及其子目录的内容的迭代器 (类) file_status(C++17) 表示文件类型及权限 (类) space_info(C++17) 关于文件系统上空闲及可用空间的信息 (类) file_type(C++17) 文件的类型 (枚举) perms(C++17) 标识文件系统权限 (枚举) perm_options(C++17) 指定权限操作的语义 (枚举) copy_options(C++17) 指定复制操作的语义 (枚举) directory_options(C++17) 用于迭代目录内容的选项 (枚举) file_time_type(C++17) 表示文件时间值 (typedef) 非成员函数 定义于头文件 &amp;lt;filesystem&amp;gt; 定义于命名空间 std::filesystem absolute(C++17) 组成一个绝对路径 (函数) canonicalweakly_canonical(C++17) 组成一个规范路径 (函数) relativeproximate(C++17) 组成一个相对路径 (函数) copy(C++17) 复制文件或目录 (函数) copy_file(C++17) 复制文件内容 (函数) copy_symlink(C++17) 复制一个符号链接 (函数) create_directory create_directories(C++17)(C++17) 创建新目录 (函数) create_hard_link(C++17) 创建一个硬链接 (函数) create_symlink create_directory_symlink(C++17)(C++17) 创建一个符号链接 (函数) current_path(C++17) 返回或设置当前工作目录 (函数) exists(C++17) 检查路径是否指代既存的文件系统对象 (函数) equivalent(C++17) 检查两个路径是否指代同一文件系统对象 (函数) file_size(C++17) 返回文件的大小 (函数) hard_link_count(C++17) 返回指代特定文件的硬链接数 (函数) last_write_time(C++17) 获取或设置最近一次数据修改的时间 (函数) permissions(C++17) 修改文件访问权限 (函数) read_symlink(C++17) 获得符号链接的目标 (函数) remove remove_all(C++17)(C++17) 移除一个文件或空目录 移除一个文件或递归地移除一个目录及其所有内容 (函数) rename(C++17) 移动或重命名一个文件或目录 (函数) resize_file(C++17) 以截断或填充零更改一个常规文件的大小 (函数) space(C++17) 确定文件系统上的可用空闲空间 (函数) status symlink_status(C++17)(C++17) 确定文件属性 确定文件属性，检查符号链接目标 (函数) temp_directory_path(C++17) 返回一个适用于临时文件的目录 (函数) 文件类型 is_block_file(C++17) 检查给定的路径是否表示块设备 (函数) is_character_file(C++17) 检查给定的路径是否表示字符设备 (函数) is_directory(C++17) 检查给定的路径是否表示一个目录 (函数) is_empty(C++17) 检查给定的路径是否表示一个空文件或空目录 (函数) is_fifo(C++17) 检查给定的路径是否表示一个命名管道 (函数) is_other(C++17) 检查参数是否表示一个其他文件 (函数) is_regular_file(C++17) 检查参数是否表示一个常规文件 (函数) is_socket(C++17) 检查参数是否表示一个具名 IPC 套接字 (函数) is_symlink(C++17) 检查参数是否表示一个符号链接 (函数) status_known(C++17) 检查参数是否表示一个符号链接 (函数) </description>
    </item>
    
    <item>
      <title>C&#43;&#43;正则表达式</title>
      <link>https://okokfun.github.io/post/c-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 16 Jan 2022 14:45:25 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>此文章来源于👉正则表达式库 - cppreference.com,并整理
正则表达式库提供表示正则表达式的类，正则表达式是一种用于在字符串中匹配模式的微型语言。
定义于头文件 #include &amp;lt;iostream&amp;gt; #include &amp;lt;iterator&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;regex&amp;gt; int main() { std::string s = &amp;#34;Some people, when confronted with a problem, think &amp;#34; &amp;#34;\&amp;#34;I know, I&amp;#39;ll use regular expressions.\&amp;#34; &amp;#34; &amp;#34;Now they have two problems.&amp;#34;; std::regex self_regex(&amp;#34;REGULAR EXPRESSIONS&amp;#34;, std::regex_constants::ECMAScript | std::regex_constants::icase); if (std::regex_search(s, self_regex)) { std::cout &amp;lt;&amp;lt; &amp;#34;Text contains the phrase &amp;#39;regular expressions&amp;#39;\n&amp;#34;; } std::regex word_regex(&amp;#34;(\\w+)&amp;#34;); auto words_begin = std::sregex_iterator(s.begin(), s.end(), word_regex); auto words_end = std::sregex_iterator(); std::cout &amp;lt;&amp;lt; &amp;#34;Found &amp;#34; &amp;lt;&amp;lt; std::distance(words_begin, words_end) &amp;lt;&amp;lt; &amp;#34; words\n&amp;#34;; const int N = 6; std::cout &amp;lt;&amp;lt; &amp;#34;Words longer than &amp;#34; &amp;lt;&amp;lt; N &amp;lt;&amp;lt; &amp;#34; characters:\n&amp;#34;; for (std::sregex_iterator i = words_begin; i !</description>
    </item>
    
    <item>
      <title>线程支持库</title>
      <link>https://okokfun.github.io/post/%E7%BA%BF%E7%A8%8B%E6%94%AF%E6%8C%81%E5%BA%93/</link>
      <pubDate>Sat, 15 Jan 2022 17:13:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E7%BA%BF%E7%A8%8B%E6%94%AF%E6%8C%81%E5%BA%93/</guid>
      <description>此文来自于👉线程支持库 - cppreference.com
线程支持库 thread(C++11) std::thread 类与支持函数 stop_token(C++20) std::jthread 的停止记号 mutex(C++11) 互斥元件 shared_mutex(C++14) 共享互斥元件 future(C++11) 异步计算元件 condition_variable(C++11) 线程等待条件 semaphore(C++20) 信号量 latch(C++20) 闩 barrier(C++20) 屏障 #include &amp;lt;thread&amp;gt; std::thread thread类 表示单个执行线程。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;thread&amp;gt; int main() { std::thread th1; } std:🧵:id thread::id类 是轻量的可频繁复制类，它作为 std::thread 对象的唯一标识符工作。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;thread&amp;gt; typedef unsigned long long ULL; std::string getThreadIdOfString(const std:🧵:id &amp;amp; id) { std::stringstream sin; sin &amp;lt;&amp;lt; id; return sin.str(); } ULL getThreadIdOfULL(const std:🧵:id &amp;amp; id) { return std::stoull(getThreadIdOfString(id)); } int main() { std:🧵:id id = std::this_thread::get_id(); std::cout &amp;lt;&amp;lt; &amp;#34;cout ----- id : &amp;#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;getThreadIdOfString ----- id : &amp;#34; &amp;lt;&amp;lt; getThreadIdOfString(id) &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;getThreadIdOfULL ----- id : &amp;#34; &amp;lt;&amp;lt; getThreadIdOfULL(id) &amp;lt;&amp;lt; std::endl; return 0; } std:🧵:hardware_concurrency() 返回处理器支持的并发线程数。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;关键词</title>
      <link>https://okokfun.github.io/post/c&#43;&#43;%E5%85%B3%E9%94%AE%E8%AF%8D/</link>
      <pubDate>Sat, 15 Jan 2022 15:31:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c&#43;&#43;%E5%85%B3%E9%94%AE%E8%AF%8D/</guid>
      <description> 此文章来自👉C++ 参考手册
C++关键词： alignas (C++11 起) default(1) register(C++17弃用)(2) alignof (C++11 起) delete(1) reinterpret_cast and do requires (C++20 起) and_eq double return asm dynamic_cast short atomic_cancel (TM TS) else signed atomic_commit (TM TS) enum sizeof(1) atomic_noexcept (TM TS) explicit static auto(1) export(1)(3) static_assert (C++11 起) bitand extern(1) static_cast bitor false struct(1) bool float switch break for synchronized (TM TS) case friend template catch goto this char if thread_local (C++11 起) char8_t (C++20 起) inline(1) throw(C++17中移除) char16_t (C++11 起) int true char32_t (C++11 起) long try class(1) mutable(1) typedef compl namespace typeid concept (C++20 起) new typename const noexcept (C++11 起) union consteval (C++20 起) not unsigned constexpr (C++11 起) not_eq using(1) constinit (C++20 起) nullptr (C++11 起) virtual const_cast operator void continue or volatile co_await (C++20 起) or_eq wchar_t co_return (C++20 起) private while co_yield (C++20 起) protected xor decltype (C++11 起) public xor_eq reflexpr (反射 TS) override (C++11) final (C++11) import (C++20) module (C++20) transaction_safe (TM TS) transaction_safe_dynamic (TM TS) </description>
    </item>
    
    <item>
      <title>cpr请求库</title>
      <link>https://okokfun.github.io/post/cpr-http%E8%AF%B7%E6%B1%82%E5%BA%93/</link>
      <pubDate>Thu, 13 Jan 2022 20:43:31 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/cpr-http%E8%AF%B7%E6%B1%82%E5%BA%93/</guid>
      <description>本文介绍的HTTP库👉libcpr/cpr: C++ Requests: Curl for People, a spiritual port of Python Requests. (github.com)
HttpServer Url Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/hello.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/basic.json&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/error.html&amp;#34;}; Url url{&amp;#34;http://bad_host/&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/basic_cookies.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/empty_cookies.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/check_cookies.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/v1_cookies.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/check_v1_cookies.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/basic_auth.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/bearer_token.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/digest_auth.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/header_reflect.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/temporary_redirect.html&amp;#34;}; Url url{server-&amp;gt;GetBaseUrl() + &amp;#34;/permanent_redirect.</description>
    </item>
    
    <item>
      <title>Socket_Cpp库的使用</title>
      <link>https://okokfun.github.io/post/socket_cpp%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 13 Jan 2022 20:28:16 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/socket_cpp%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。
20190623_tcp_termination.png (925×613) (linuxblogs.cn) 此库是一个简单的TCP库👉sockpp
TCP TCP Clien IPV4:tcp_clien sockpp::socket_initializer sockpp环境初始化 sockpp::tcp_connector conn({host, port}) // 初始化一个连接器，并尝试连接到{host, port} !conn.read_timeout(seconds(5)) // 读超时 conn.address() // 连接成功打印地址 conn.connect(sockpp::inet_address(&amp;#34;localhost&amp;#34;, port)) // 链接{localhost, port} sockpp::inet_address(host, port) // 返回一个默认的端口号和地址 conn.clone() // clone一个sockpp::tcp_socket conn.last_error_str() // 返回根据平台各自的错误字符串 conn.last_error() conn.write(s) // 通过coon把字符串s写过去 conn.write_n(buf, n) // 从buf中取n个字节的数据并通过tcp写过去 conn.read(buf, sizeof(buf))) // 读sizeof(buf)个字节到buf中，并返回读到的字节数 conn.read_n() // conn.address() // 服务器的地址 conn.peer_address() conn.shutdown(SHUT_WR) 例子- 单线程
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;#34;sockpp/tcp_connector.h&amp;#34; #include &amp;#34;sockpp/version.h&amp;#34; using namespace std; using namespace std::chrono; int main(int argc, char* argv[]) { cout &amp;lt;&amp;lt; &amp;#34;Sample TCP echo client for &amp;#39;sockpp&amp;#39; &amp;#34; &amp;lt;&amp;lt; sockpp::SOCKPP_VERSION &amp;lt;&amp;lt; &amp;#39;\n&amp;#39; &amp;lt;&amp;lt; endl; string host = (argc &amp;gt; 1) ?</description>
    </item>
    
    <item>
      <title>Oracle数据库介绍</title>
      <link>https://okokfun.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 09 Jan 2022 16:51:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>数据库介绍 什么是数据库?
​	数据库是为了实现一定的目的按某种规则组织起来的数据的集合, 简单的说,数据库就是存储数据的库.
​	举个例子来说明这个问题：每个人都有很多亲戚和朋友，为了保持与他们的联系，
​	我们常常用一个笔记本将他们的姓名、地址、电话等信息都记录下来，
​	这样要査谁的电话或地址就很方便了。
​	这个“通讯录”就是一个最简单的“数据库”，每个人的姓名、地址、电话等信息就是这个数据库中的“数据”。
​	我们可以在笔记本这个“数据库”中添加新朋友的个人信息，也可以由于某个朋友的电话变动而修改他的电话号码这个“数据”。
​	不过说到底，我们使用笔记本这个“数据库”还是为了能随时査到某位亲戚或朋友的地址、邮编或电话号码这些“数据”。
数据库是干什么用的?
存储和管理数据,便于程序开发.
oracle简介:
Oracle是殷墟（yīn Xu）出土的甲骨文（oracle bone inscriptions）的英文翻译的第一个单词。
Oracle公司成立与1977年，总部位于美国加州；
Oracle数据库是Oracle（中文名称叫甲骨文）公司的核心产品，Oracle数据库是一个适合于大中型企业的数据库管理系统。在所有的数据库管理系统中（比如：微软的SQL Server，IBM的DB2等），Oracle的主要用户涉及面非常广, 包括: 银行、电信、移动通信、航空、保险、金融、电子商务和跨国公司等。
Oracle数据库的一些版本有：Oracle7、Oracle8i、Oracle9i，Oracle10g到Oracle11g，Oracle12c， 各个版本之间的操作存在一定的差别，但是操作oracle数据库都使用的是标准的SQL语句，因此对于各个版本的差别不大。
2008年1月16日 收购bea，目的是为了得到weblogic（web服务器的框架，免费的对应的tomcat）。
2008年1月16日 sun公司收购了mysql 。
2009年4月20日 oracle收购了sun 。
常见的数据库有哪些？
oracle公司的oracle数据库
IBM公司的DB2数据库
Informix公司的Informix数据库
sysbase公司的sysbase数据库
Microsoft公司的SQL Server
oracle的MySQL数据库（开始属于mysql公司，后来mysql被sun收购，sun又被oracle收购）
MongoDB数据库
Mariadb数据库 (由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发,MariaDB名称来自Michael Widenius的女儿Maria的名字)
SQLite (设计目标是嵌入式)
1 Oracle的体系结构 Oracle服务器：是一个数据管理系统(RDBMS)，它提供开放的, 全面的, 近乎完整的信息管理。由1个数据库和一个（或多个）实例组成。数据库位于硬盘上，实例位于内存中。
img 1.1 表空间和数据文件 逻辑概念：表空间是由数据文件组成，位于实例上，在内存中。
物理概念：数据文件，在磁盘上（/home/oracle_11/app/oradata/orcl目录中的.DBF文件）；
​ 一个表空间包含一个或者多个数据文件。
1.2 段、区、块 img 段存在于表空间中，段是区的集合，区是数据块的集合，数据块会被映射到磁盘块。</description>
    </item>
    
    <item>
      <title>nginx安装</title>
      <link>https://okokfun.github.io/post/nginx%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 08 Jan 2022 16:07:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/nginx%E5%AE%89%E8%A3%85/</guid>
      <description>1. 一些基本概念 ###1.1 Nginx初步认识
Nginx介绍
engine x
俄罗斯
开源的框架
c语言
Tengine - 淘宝基于nginx修改的
Nginx能干什么?
作为web服务器 解析http协议 反向代理服务器 了解反向代理的概念 邮件服务器 解析邮件相关的协议: pop3/smtp/imap Nginx的优势?
更快
高峰期(数以万计的并发时)nginx可以比其它web服务器更快的响应请求 高扩展
低耦合设计的模块组成,丰富的第三方模块支持 高可靠
经过大批网站检验 www.sina.com.cn www.xunlei.com www.163.com 每个worker进程相对独立, 出错之后可以快速开启新的worker worker进程的个数是可以控制的 在后台干活的进程 低内存消耗
一般情况下,10000个非活跃的HTTP Keep-Alive连接在nginx中仅消耗 2.5M内存 单机支持10万以上的并发连接
取决于内存,10万远未封顶 热部署
master和worker的分离设计,可实现7x24小时不间断服务的前提下升级nginx可执行文件 最自由的BSD许可协议
BSD许可协议允许用户免费使用nginx, 修改nginx源码,然后再发布 淘宝: tengine 1.2 正向/反向代理 正向代理
正向代理是位于客户端和原始服务器之间的服务器，为了能够从原始服务器获取请求的内容，客户端需要将请求发送给代理服务器，然后再由代理服务器将请求转发给原始服务器，原始服务器接受到代理服务器的请求并处理，然后将处理好的数据转发给代理服务器，之后再由代理服务器转发发给客户端，完成整个请求过程。
正向代理的典型用途就是为在防火墙内的局域网客户端提供访问Internet的途径, 比如:
学校的局域网
单位局域网访问外部资源
051157002507977.jpg 正向代理服务器是为用户服务的
反向代理
反向代理方式是指代理原始服务器来接受来自Internet的链接请求，然后将请求转发给内部网络上的原始服务器，并将从原始服务器上得到的结果转发给Internet上请求数据的客户端。那么顾名思义，反向代理就是位于Internet和原始服务器之间的服务器，对于客户端来说就表现为一台服务器，客户端所发送的请求都是直接发送给反向代理服务器，然后由反向代理服务器统一调配。
1.png 2.png 3.png 4.png 客户端给服务器发送请求, 连接服务器, 用户不知道服务器地址, 只有反向代理服务器的地址是公开的
请求直接发给反向代理服务器</description>
    </item>
    
    <item>
      <title>MySQL数据库API库</title>
      <link>https://okokfun.github.io/post/mysql%E6%95%B0%E6%8D%AE%E5%BA%93api%E5%BA%93/</link>
      <pubDate>Wed, 05 Jan 2022 20:21:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/mysql%E6%95%B0%E6%8D%AE%E5%BA%93api%E5%BA%93/</guid>
      <description>MySQL数据库API库 访问MySQL服务器，这需要使用mysqlclient库，MySQL的大多数客户端API（除Java和.NET）都是通过这个库来和MySQL服务器通讯的，而这个库正是使用C语言编写的。
可使用mysql -V 命令查看当前系统内所使用的mysql数据库版本信息。数据库版本为5.6.20版。因此，我们可从帮助手册refman-5.6-en.a4.pdf入手，了解学习MySQL C API使用的一般信息。
从API手册23.8中可获取信息，MySQL客户端使用 libmysqlclient 库内部的函数访问MySQL服务器。因此我们在编程过程中，如若使用到库内的函数，必须链接函数库，对应的要找到头文件所在目录位置、函数库路径。以便我们在使用gcc编译工具时可以填充参数-I、-L、-l。
从手册中可获知，函数库名为mysqlclient。
因此我们使用命令:
find / -name libmysqlclient* 查找该库的路径。得到 /usr/lib64/mysql/libmysqlclient.a。 nm /usr/lib64/mysql/libmysqlclient.a命令可查看库内包含的函数。
编写hello应用链接函数库 编写一个hello.c应用程序，链接使用该库。
用到头文件 &amp;lt;mysql.h&amp;gt; 可使用locate mysql.h查看其目录位置/usr/include/mysql/mysql.h。
编译引用了库的应用程序。
gcc hello.c -o hello -I/usr/include/mysql/ -L/usr/lib64/mysql/ -lmysqlclient 参见帮助手册refman-5.6-en.a4.pdf：23.8.4.3小节。
MySQL API常用函数 总体印象 使用MySQL库API函数的一般步骤：
a. 初始化. MYSQL *mysql_init(MYSQL *mysql);
b. 错误处理	unsigned int mysql_errno(MYSQL *mysql);char *mysql_error(MYSQL *mysql);
c. 建立连接.	MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd,const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag);</description>
    </item>
    
    <item>
      <title>Mysql数据库</title>
      <link>https://okokfun.github.io/post/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 05 Jan 2022 12:57:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>1 MySQL基础知识 瑞典MySQL AB公司开发，由SUN收购，而后SUN被甲骨文并购，目前属于Oracle公司。
MySQL是一种关联数据库管理系统 由于其体积小、速度快、总体拥有成本低、MySQL软件采用了双授权政策，分为社区版和企业版。
1.1 MySQL版本及下载 MySQL数据库版本相对比较繁杂。常见的有：Community社区版、Enterprise企业版。
MySQL Community Server 版是开源免费的，这也是我们通常用的MySQL的版本。可以满足绝大多数用户需求。
MySQL Enterprise Edition 企业版收费的，官方指出提供30天免费试用期。可进一步划分为MySQL标准版、MySQL企业版、MySQL集群版。官方提供付费服务。
其中Community Server 可以直接从mysql 的官网下载。但Enterprice Edition只能从Oracle edelivery上下载，而Edelivery有时会屏蔽中国IP。
MySQL各版本区别参见：
http://www.admin10000.com/Document/62.html
下载mysql时注意区分版本细节及所应用的系统平台：linux(32/64) 、win(32/64)
举例：
win版本：
mysql-installer-community-8.0.26.0.msi版本
​ GA 是指软件的通用版本，一般指正式发布的版本 (Generally Available (GA) Release)
​ mysql-essential-5.1.60-win32.msi精简版，如果只需要mysql服务，就选择此版本。
​ mysql-5.1.60-win32.msi 是完 是整版，包含安装程序和配置向导，有MySQL文档。
mysql-noinstall-5.1.60-win32.zip 是非安装的zip压缩包，没有自动安装程序和配置向导，无安装向导
​ mysql-5.1.60.zip 是用于windows的Mysql源码压缩包
linux版本
​ 在http://www.mysql.com/downloads/网站上下载不了
​ 在 www.oracle.com/downloads 找mysql 注册用户, 选择操作系统平台和mysql版本 进行下载
官方文档上有关MySQL安装，介绍了3种类型及其对应安装方式来安装MySQL数据库：
Linux supports a number of different solutions for installing MySQL. The recommended method is to use one of the distributions from Oracle.</description>
    </item>
    
    <item>
      <title>Json的使用</title>
      <link>https://okokfun.github.io/post/json%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 04 Jan 2022 17:38:16 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/json%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>百度百科 JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。
本文采用 @MistEO MistEO哥哥写的项目。
他写两个很棒的项目
Json:MistEO/meojson: A fast and easy-to-use JSON parser/generator for C++ (github.com)
明日方舟助手：MistEO/MeoAssistantArknights: 明日方舟助手，自动刷图、智能基建换班，全日常一键长草！ (github.com)
他的博客肝！ (misteo.top)，不过是鸽王。
好了开始正题了
json下载 下载玛丽写的Json项目MistEO:Json
git clone https://github.com.cnpmjs.org/MistEO/meojson.git 编译 json静态库 make 运行命令后会在build文件夹生成libmeojson.a,然后就在项目中可以使用了
在代码中添加头文件 #include &amp;#34;json.h&amp;#34; 若您需要解析 Json5, 则请包含 json5.hpp 头文件 #include &amp;#34;json5.hpp&amp;#34; meojson 仅依赖 STL, 但需要 c++17 标准 使用 json /*** * from sample/sample.cpp ***/ #include &amp;lt;iostream&amp;gt; #include &amp;#34;json.hpp&amp;#34; void parsing() { std::string content = R&amp;#34;( { &amp;#34;repo&amp;#34;: &amp;#34;meojson&amp;#34;, &amp;#34;author&amp;#34;: { &amp;#34;MistEO&amp;#34;: &amp;#34;https://github.</description>
    </item>
    
    <item>
      <title>Visual_Studio_2022添加第三方库</title>
      <link>https://okokfun.github.io/post/visual-studio-2022%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
      <pubDate>Tue, 04 Jan 2022 17:36:44 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/visual-studio-2022%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid>
      <description>文件夹创建 在项目根目录创建Dependencies,然后在Dependencies创建include目录 在Dependencies中创建Libs 把头文件和库文件放到对目录
项目头文件添加 然后用Visual Studio打开项目，找到 红色圈中的功能条
再点击最下边的属性
定位到常规，然后再编辑附加包含目录，添加一条新item为$(SolutionDir)Dependencies\include\
其中 $(SolutionDir)为项目根目录，Dependencies\include\为头文件目录
至此第三方库的头文件已经添加完成
项目库文件添加 点击链接器，常规，附加库目录，添加一条$(SolutionDir)Dependencies\Libs\GLFW,
然后点击输入，附加依赖项，写入要使用的库文件名，点击确定，第三方库已被添加到项目中
End.</description>
    </item>
    
    <item>
      <title>Cmake的安装与CMakeLists.txt的编写</title>
      <link>https://okokfun.github.io/post/cmake%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8Ecmakelists-txt%E7%9A%84%E7%BC%96%E5%86%99/</link>
      <pubDate>Mon, 03 Jan 2022 16:24:52 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/cmake%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8Ecmakelists-txt%E7%9A%84%E7%BC%96%E5%86%99/</guid>
      <description>安装 cmake是自动化项目编译工具，可以编译源代码、制作程序库、产生适配器（wrapper）、还可以用任意的顺序建构执行档。CMake 支持 in-place 建构（二进档和源代码在同一个目录树中）和 out-of-place 建构（二进档在别的目录里），因此可以很容易从同一个源代码目录树中建构出多个二进档。CMake 也支持静态与动态程式库的建构。
下载地址👉Download | CMake， 建议二进制安装。
win:
https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-windows-x86_64.zip ubuntu:
sudo apt install cmake wget https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-linux-x86_64.tar.gz centos:
sudo yum install cmake arch:
sudo pacman -S cmake 编写CMakeLists.txt 单文件单目录CMakeLists.txt编写 # 指定cmake版本 cmake_minimum_required(VERSION 3.22) # 工程名 project(demo1) # 指定编译后文件名 set(OUTPUTNAME demo1) set(CMAKE_CXX_FLAGS &amp;#34;${CMAKE_CXX_FLAGS} -Wall -g -O2 -std=c++20&amp;#34;) # 指定编译参数 # 指定源文件夹 aux_source_directory(. DIR_SRCS) # 编译文件 add_executable(${OUTPUTNAME} ${DIR_SRCS}) 此文件加编写完毕后，创建一个build文件夹，cd进去，执行cmake ..，会生成Makefile文件，再然后执行make编译，最终生成项目文件。
多文件单目录CMakeLists.txt编写 和demo1相同
# 指定cmake版本 cmake_minimum_required(VERSION 3.22) # 工程名 project(demo2) # 指定编译后文件名 set(OUTPUTNAME demo2) set(CMAKE_CXX_FLAGS &amp;#34;${CMAKE_CXX_FLAGS} -Wall -g -O2 -std=c++20&amp;#34;) # 指定编译参数 # 指定源文件夹 aux_source_directory(.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;设计模式-行为模式</title>
      <link>https://okokfun.github.io/post/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 03 Jan 2022 15:48:22 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</guid>
      <description>推荐看👉常用设计模式有哪些？ (refactoringguru.cn)
观察者模式 观察者模式是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。
适用场景:
当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式。
当你使用图形用户界面类时通常会遇到一个问题。 比如， 你创建了自定义按钮类并允许客户端在按钮中注入自定义代码， 这样当用户按下按钮时就会触发这些代码。
观察者模式允许任何实现了订阅者接口的对象订阅发布者对象的事件通知。 你可在按钮中添加订阅机制， 允许客户端通过自定义订阅类注入自定义代码。
当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用。
订阅列表是动态的， 因此订阅者可随时加入或离开该列表。
/** * Observer Design Pattern * * Intent: Lets you define a subscription mechanism to notify multiple objects * about any events that happen to the object they&amp;#39;re observing. * * Note that there&amp;#39;s a lot of different terms with similar meaning associated * with this pattern.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;设计模式-结构型模式</title>
      <link>https://okokfun.github.io/post/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 03 Jan 2022 15:07:58 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>推荐看👉常用设计模式有哪些？ (refactoringguru.cn)
代理模式 解释
对真正要被访问的产品或类加以控制，并可以进行一些控制，把访问产品与代理进行映射，访问代理就相当于访问产品
适用场景：
使用代理模式的方式多种多样， 我们来看看最常见的几种。
延迟初始化 （虚拟代理）。 如果你有一个偶尔使用的重量级服务对象， 一直保持该对象运行会消耗系统资源时， 可使用代理模式。
你无需在程序启动时就创建该对象， 可将对象的初始化延迟到真正有需要的时候。
访问控制 （保护代理）。 如果你只希望特定客户端使用服务对象， 这里的对象可以是操作系统中非常重要的部分， 而客户端则是各种已启动的程序 （包括恶意程序）， 此时可使用代理模式。
代理可仅在客户端凭据满足要求时将请求传递给服务对象。
本地执行远程服务 （远程代理）。 适用于服务对象位于远程服务器上的情形。
在这种情形中， 代理通过网络传递客户端请求， 负责处理所有与网络相关的复杂细节。
记录日志请求 （日志记录代理）。 适用于当你需要保存对于服务对象的请求历史记录时。 代理可以在向服务传递请求前进行记录。
缓存请求结果 （缓存代理）。 适用于需要缓存客户请求结果并对缓存生命周期进行管理时， 特别是当返回结果的体积非常大时。
代理可对重复请求所需的相同结果进行缓存， 还可使用请求参数作为索引缓存的键值。
智能引用。 可在没有客户端使用某个重量级对象时立即销毁该对象。
代理会将所有获取了指向服务对象或其结果的客户端记录在案。 代理会时不时地遍历各个客户端， 检查它们是否仍在运行。 如果相应的客户端列表为空， 代理就会销毁该服务对象， 释放底层系统资源。
代理还可以记录客户端是否修改了服务对象。 其他客户端还可以复用未修改的对象。
class Subject { public: virtual void Request() const = 0; }; /** * The RealSubject contains some core business logic. Usually, RealSubjects are * capable of doing some useful work which may also be very slow or sensitive - * e.</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://okokfun.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 01 Jan 2022 19:32:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>推荐看👉 OI Wiki
数据结构：数据结构是为算法服务而设计的。 算法：充分且合理利用计算机资源处理数据而诞生。
数据结构部分 一. 数据结构的存储方式有两种 1.顺序存储(数组,内存连续) 2.链式存储(链表,内存不连续,依靠节点的指针指向下一个节点) 常见的数据结构有：
数组(array),链表(LinkedList),
双向链表(doubly-linked-list),
树：
二叉树(Binary tree),
二叉查找树(Binary Search Tree),平衡二叉树(AVL),
2-3-4树
红黑树(Red Black Tree), B树, B+树, B*树, AA-树
treap树, k-d树, 伸展树(Splay Tree)
最小生成树(Minimum Spanning Tree)
图(graph),
栈(stack), 堆(heap),队列(queue),
散列表(hash), 位图(bitmap),
字典(map)
二 常见数据结构实现 1.链表 链表(LinkedList) 避免数组插入和删除的线性开销,我们需要允许表可以不连续存储,防止数据大量移动
链表的设计 设计成一个链表节点至少包含两部分：
数据部和指针部
数据部为我们要存储的数据,指针部为指向下一个链表节点
typedef struct ListElmt_ { void *data; struct ListElmt_ *next; } ListElmt; 单向链表 typedef struct ListElmt_ { void *data; struct ListElmt_ *next; } ListElmt; 例子 /*1ist.</description>
    </item>
    
    <item>
      <title>算法</title>
      <link>https://okokfun.github.io/post/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 01 Jan 2022 19:32:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E7%AE%97%E6%B3%95/</guid>
      <description>推荐看👉 OI Wiki
算法部分 位图(bitmap) 通过一个bit位来表示某个元素对应的值或者状态，其中的key就是对应元素本身，value对应0或1，我们知道8个bit可以组成一个Byte，所以bitmap本身会极大的节省储存空间。
位图BitMap
字典(map) 字典有什么特点呢?
字典的主要特点是一一对应的关系. 比如保存一个人的信息, 在合适的情况下取出这些信息. 使用数组的方式: [18, &amp;ldquo;Coderwhy&amp;rdquo;, 1.88]. 可以通过下标值取出信息. 使用字典的方式: {&amp;ldquo;age&amp;rdquo; : 18, &amp;ldquo;name&amp;rdquo; : &amp;ldquo;Coderwhy&amp;rdquo;, &amp;ldquo;height&amp;rdquo;: 1.88}. 可以通过key取出value 字典(map)的详细解释
kmp算法 kmp算法也就是字符串匹配算法。
比如： 在string str = &amp;ldquo;abcababcba&amp;quot;中匹配 string str2 = &amp;ldquo;ababc&amp;ldquo;字符串
最长公共前后缀：要匹配的字符串生成的数组
从一个字符开始到整个字符串，默认每行的公共前后缀最大值为全部字母数，然后判断是否符合其数字，如果不符合减一，一直判断到0结束。一行元素为1的数字为0，最后一行不统计
0	a
0	a	b
1	a	b	a
2	a	b	a	b
0	a	b	a	b	c
得出的公共前后缀为
0 0 1 2 0 然后整体向后移动一位，原最后一位被覆盖，下标为0的位置设为-1,最后的公共前后缀为
-1 0 0 1 2 kmp匹配过程</description>
    </item>
    
    <item>
      <title>C&#43;&#43;设计模式-创建型模式</title>
      <link>https://okokfun.github.io/post/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 27 Dec 2021 13:48:06 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>推荐看👉常用设计模式有哪些？ (refactoringguru.cn)
设计模式描述：
用特定的套路解决现实问题，每一个设计模式对应一个法子
分类 根据意图或目的分类
创建型模式: 提供创建对象机制，增加已有的代码灵活性和可复用性 结构型模式: 介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。 行为模式: 负责对象间的高效沟通和职责委派。 创建型模式 simple_factory_pattern(简单工厂) Factory Method(工厂方法) 在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。
要解决的问题：
当增加一个新类，和其他类低耦合
解决方案:
增加一个子类的抽象类，所有的子类继承于抽象类，并且写父类的实现
#include &amp;lt;iostream&amp;gt; class product { public: virtual ~product() {} }; class phone : public product { public: phone() { std::cout &amp;lt;&amp;lt; &amp;#34;make phone&amp;#34; &amp;lt;&amp;lt; std::endl; } }; class tv : public product { public: tv() { std::cout &amp;lt;&amp;lt; &amp;#34;make tv&amp;#34; &amp;lt;&amp;lt; std::endl; } }; class factory { public: virtual ~factory() {} virtual product* make_product() = 0; }; class phone_factory : public factory { public: virtual product* make_product() { return new phone(); } }; class tv_factory : public factory { public: virtual product* make_product() { return new tv(); } }; int main() { factory* factory1 = new phone_factory(); product* product1 = factory1-&amp;gt;make_product(); factory* factory2 = new tv_factory(); product* product2 = factory2-&amp;gt;make_product(); delete factory1; delete product1; delete factory2; delete product2; return 0; } Abstract Factory(抽象工厂模式) 随着业务的发展，更多的类需要创建，比如美国工厂，欧洲工厂，亚洲工厂，南美工厂，每个地区工厂又需要创建各自的产品</description>
    </item>
    
    <item>
      <title>gdb代码调试工具</title>
      <link>https://okokfun.github.io/post/gdb%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sun, 26 Dec 2021 16:46:38 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/gdb%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
      <description>GDB是是 Linux 平台下最常用的一款程序调试器，通常服务于终端下，无GUI。Linux下很多IDE的调试能力源于GDB调试器
1. Linux下安装二进制版GDB调试器 centos下命令：
sudo yum -y install gdb Ubuntu下安装命令：
sudo apt -y install gdb 2. 源码安装下载： sudo wget http://ftp.gnu.org/gnu/gdb/gdb-11.1.tar.xz 解压：
tar -zxvf gdb-11.1.tar.xz 进入源码目录安装：
./configure make sudo make install 3. 调试准备 GDB supports the following languages (in alphabetical order):
Ada Assembly C C++ D Fortran Go Objective-C OpenCL Modula-2 Pascal Rust 只是为了调试代码需要在编译时加入：-g参数，关掉编译器优化参数：-O0，打开所有 warning：-Wall 4. GDB的启动与退出 启动gdb调试 gdb 可执行程序文件名
(gdb) gdb app 退出调试
quit = q (gdb) q 命令行传参:show args 设置的时机: 启动gdb之后, 在应用程序启动之前</description>
    </item>
    
    <item>
      <title>从Portainer点击端口号进入容器服务方法</title>
      <link>https://okokfun.github.io/post/%E4%BB%8Eportainer%E7%82%B9%E5%87%BB%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 26 Dec 2021 13:43:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E4%BB%8Eportainer%E7%82%B9%E5%87%BB%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95/</guid>
      <description> 1.点击home,再点击配置，然后填写nas的ip地址即可 </description>
    </item>
    
    <item>
      <title>OpenMediaVault中docker与工具portainer</title>
      <link>https://okokfun.github.io/post/openmediavault%E4%B8%AD%E5%AE%89%E8%A3%85docker%E4%B8%8Egui%E5%B7%A5%E5%85%B7portainer/</link>
      <pubDate>Sun, 26 Dec 2021 13:42:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/openmediavault%E4%B8%AD%E5%AE%89%E8%A3%85docker%E4%B8%8Egui%E5%B7%A5%E5%85%B7portainer/</guid>
      <description> 1. 安装完第三方插件后，再安装docker与portainer 2. 点击Opem Portainer创建管理账号 3. 然后创建一个容器网络 </description>
    </item>
    
    <item>
      <title>OpenMediaVault软件源修改</title>
      <link>https://okokfun.github.io/post/openmediavault%E8%BD%AF%E4%BB%B6%E6%BA%90%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Sun, 26 Dec 2021 13:42:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/openmediavault%E8%BD%AF%E4%BB%B6%E6%BA%90%E4%BF%AE%E6%94%B9/</guid>
      <description>OpenMediaVault 国内软件源镜像服务器
清华大学镜像 https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/ 北京外国语大学镜像 https://mirrors.bfsu.edu.cn/OpenMediaVault/ OMV 5
一、编辑 sources.list 1. 备份配置文件
sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 2. 清空配置文件
sudo sh -c &amp;#39;echo &amp;gt; /etc/apt/sources.list&amp;#39; 3. 编辑配置文件
sudo nano /etc/apt/sources.list 复制并粘贴以下内容：
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free 二、编辑 openmediavault-kernel-backports.list 1. 备份配置文件</description>
    </item>
    
    <item>
      <title>OpenMediaVault创建容器</title>
      <link>https://okokfun.github.io/post/openmediavault%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Sun, 26 Dec 2021 13:41:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/openmediavault%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8/</guid>
      <description>要创建的容器有：
Mariadb: 关系型数据库，mysql的开源版本Adminer：开源的数据库管理软件Gitea：开源的私人代码版本管理器Flarum：开源的论坛WordPress：开源的博客软件NextCloud：开源的私人网盘软件1.在一个分区上创建我们需要的文件夹存放配置文件 2.在终端拉取上面的各个镜像文件 1.flarum docker pull mondedie/flarum:latest2.wordpress docker pull wordpress3.adminer docker pull adminer4.mariadb docker pull mariadb5.gitea docker pull gitea/gitea6.nextcloud docker pull nextcloud3.创建各个容器 按顺序应该创建数据库软件与数据库管理软件 1.mariadb容器创建参考 container_name: mariadbenvironment:- PUID=1000- PGID=1000- MYSQL_ROOT_PASSWORD=1- TZ=Asia/Shanghaivolumes:- /srv/dev-disk-by-id-ata-VBOX_HARDDISK_VBdf1e9e6f-f90961e1-part1/mariadb/config:/configports:- 3306:3306networks:- mynetrestart: alwaysnetworks:mynet:external:name: mynet2.adminer创建参考 container_name: adminerenvironment:- ADMINER_DEFAULT_SERVER=mariadbports:- 8080:8080networks:- mynetrestart: alwaysnetworks:mynet:external:name: mynet3.</description>
    </item>
    
    <item>
      <title>OpenMediaVault安装与初步设置</title>
      <link>https://okokfun.github.io/post/openmediavault%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%9D%E6%AD%A5%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 26 Dec 2021 13:39:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/openmediavault%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%9D%E6%AD%A5%E8%AE%BE%E7%BD%AE/</guid>
      <description>OpenMediaVault（omv）是开源的nas系统，本博客尽量采用开源的代码和软件
1. 镜像下载 下载地址
https://sourceforge.net/projects/openmediavault/files/latest/download 2. 刻录或虚拟机安装 可以用etcher软件刻录镜像
安装 omv-extras 启用 OMV 5 社区插件支持 3. 安装依赖的工具 sudo apt --yes --no-install-recommends install dirmngr gnupg 4. 下载最新的omv-extras 安装包 地址：https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/openmediavault-plugin-developers/pool/main/o/openmediavault-omvextrasorg/openmediavault-omvextrasorg_5.6.2_all.deb 下载命令：sudo wget https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/openmediavault-plugin-developers/pool/main/o/openmediavault-omvextrasorg/openmediavault-omvextrasorg_5.6.2_all.deb 5. 安装 sudo dpkg -i openmediavault-omvextrasorg_5.6.2_all.deb 6. 安装完开启docker扩展源 7. Docker修改镜像源并在OMV 中的安装和使用 Docker 设置国内镜像服务器
第一步 创建 docker 配置文件目录 sudo mkdir /etc/docker 第二步 创建 daemon.json 配置文件 sudo touch /etc/docker/daemon.json 第三步 编辑配置文件 sudo nano /etc/docker/daemon.json 在编辑器中粘贴以下内容: { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://hub-mirror.c.163.com&amp;#34;, &amp;#34;https://mirror.baidubce.com&amp;#34; ] } 第四步 重启 docker 服务 sudo systemctl daemon-reload sudo systemctl restart docker 检查设置是否生效</description>
    </item>
    
    <item>
      <title>OpenLib-c&#43;&#43;</title>
      <link>https://okokfun.github.io/post/openlib-c/</link>
      <pubDate>Sun, 26 Dec 2021 13:23:02 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/openlib-c/</guid>
      <description>开源 C++ 库列表 &amp;lt; cpp‎ | links
此页面的目的是构建开源 C++ 库的比较列表，使得人们在需要特定功能的实现时，不必浪费时间在网上（ DuckDuckGo 、谷歌、必应等）搜索。
若你知道可能对其他人有用的库，请在此添加到它的链接。能包含进来的库没有限制，但是必须能便捷地下载库的源码。
以“原态”提供此页面——希望这有用，但不提供任何担保。过时、误导或错误的链接可能出现于此。若你注意到这些错误，则改正它会很有意义。
包管理器 Package manager Description build2 一个开源的 (MIT)、跨平台的构建工具链，旨在为开发和打包 C/C++ 项目时提供如 Rust Cargo 一样的便利性。 cget Cmake 包检索工具，可用于下载并安装 Cmake 包。 cmodule 非侵入式 CMake 依赖管理。 conan 去中心化、开源 (MIT) 的 C/C++ 包管理器。 CPM.cmake 一段可以为 CMake 加入依赖管理功能的 CMake 脚本。它是作为 CMake 的 FetchContent 模块的一个简单包装构建的。该模块加入了版本控制、缓存、简单 API 等功能。 hunter 一个 CMake 驱动的跨平台包管理器，服务于 C/C++ 项目。 spack 一个超级计算机、Linux、macOS 平台的包管理器。它使得安装科学软件变得简单。非绑定于某一特定语言。 teaport 一个受 cocoapods 启发的依赖管理器。 vcpkg 一个 Windows、Linux、macOS 平台的 C++ 包管理器。 库 音频 库名 简述 协议 配置手段 Aquila Aquila 是一个开源、跨平台的 C++11 DSP 库。 MIT 许可 CMake Essentia 开源库，音频和音乐分析、描述和合成工具 (MIR) (源码) Affero GPLv3 FFTW 离散傅里叶变换 (DFT) 计算库 (SSE/SSE2/AVX/Altivec/ARM Neon)。 (源码) GPL-2.</description>
    </item>
    
    <item>
      <title>Arch安装</title>
      <link>https://okokfun.github.io/post/arch%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 24 Dec 2021 19:34:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/arch%E5%AE%89%E8%A3%85/</guid>
      <description>Arch安装 一.准备工作 1.1下载镜像 地址：
清华：https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/ 163:https://mirrors.163.com/archlinux/iso/latest/ 中科大：https://mirrors.ustc.edu.cn/archlinux/iso/latest/ 上海交通：https://mirror.sjtu.edu.cn/archlinux/iso/latest/ 北大：https://mirrors.pku.edu.cn/archlinux/iso/latest/ 本文是Arch官方文档的再次梳理版
https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) 安装方法有很多种比如脚本，实体机，虚拟机
本文采用虚拟机+SSH安装+UEFI，SSH方便复制命令
二.安装 1.键盘布局,默认为us，不需要更改 2.验证引导模式 ls /sys/firmware/efi/efivars 结果无错误切有目录则是UEFI，反之是BIOS引导
3.连接网络 ip link 用 ping 检查网络连接
ping archlinux.org 4.更新系统时间 timedatectl set-ntp true 可用 timedatectl status 检查服务状态
5.建立硬盘分区 cfdisk比fdisk配置简单许多，因此本文采用cfdisk
cfdisk -l cfdisk UEFI采用GPT分区，一般情况下需要创建
挂载点 分区 分区类型 建议大小 /mnt/boot 或 /mnt/efi /dev/efi_system_partition（efi 系统分区） EFI 系统分区 至少 260 MiB [SWAP] /dev/swap_partition（交换空间分区） Linux swap (交换空间) 大于 512 MiB /mnt /dev/root_partition（根分区） Linux x86-64 根目录 (/) 剩余空间 文件系统 创建命令 工具 Archiso [1] 内核文档 [2] 说明 Btrfs mkfs.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;线程池</title>
      <link>https://okokfun.github.io/post/c-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Fri, 24 Dec 2021 17:01:29 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>C++线程池 任务类 #pragma once #include &amp;lt;mutex&amp;gt; #include &amp;lt;queue&amp;gt; // 定义任务结构体 using callback = void (*)(void *); struct Task { Task() { this-&amp;gt;function = nullptr; this-&amp;gt;arg = nullptr; } Task(callback f, void *arg) { this-&amp;gt;function = f; this-&amp;gt;arg = arg; } callback function; void *arg; }; class TaskQueue { public: TaskQueue(); ~TaskQueue(); // 添加任务 void addTask(Task task); void addTask(callback f, void *arg); // 取出一个任务 Task getTask(); // 判断队列任务是否为空 inline bool empty() { return m_taskQ.</description>
    </item>
    
  </channel>
</rss>
