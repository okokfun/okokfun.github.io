<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Mutex - Tag - My Blog</title>
        <link>https://okokfun.github.io/tags/mutex/</link>
        <description>Mutex - Tag - My Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 15 Jan 2022 17:13:05 &#43;0000</lastBuildDate><atom:link href="https://okokfun.github.io/tags/mutex/" rel="self" type="application/rss+xml" /><item>
    <title>Á∫øÁ®ãÊîØÊåÅÂ∫ì</title>
    <link>https://okokfun.github.io/posts/%E7%BA%BF%E7%A8%8B%E6%94%AF%E6%8C%81%E5%BA%93/</link>
    <pubDate>Sat, 15 Jan 2022 17:13:05 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://okokfun.github.io/posts/%E7%BA%BF%E7%A8%8B%E6%94%AF%E6%8C%81%E5%BA%93/</guid>
    <description><![CDATA[Ê≠§ÊñáÊù•Ëá™‰∫éüëâÁ∫øÁ®ãÊîØÊåÅÂ∫ì - cppreference.com
Á∫øÁ®ãÊîØÊåÅÂ∫ì thread(C++11) std::thread Á±ª‰∏éÊîØÊåÅÂáΩÊï∞ stop_token(C++20) std::jthread ÁöÑÂÅúÊ≠¢ËÆ∞Âè∑ mutex(C++11) ‰∫íÊñ•ÂÖÉ‰ª∂ shared_mutex(C++14) ÂÖ±‰∫´‰∫íÊñ•ÂÖÉ‰ª∂ future(C++11) ÂºÇÊ≠•ËÆ°ÁÆóÂÖÉ‰ª∂ condition_variable(C++11) Á∫øÁ®ãÁ≠âÂæÖÊù°‰ª∂ semaphore(C++20) ‰ø°Âè∑Èáè latch(C++20) Èó© barrier(C++20) Â±èÈöú #include &lt;thread&gt; std::thread threadÁ±ª Ë°®Á§∫Âçï‰∏™ÊâßË°åÁ∫øÁ®ã„ÄÇ
#include &lt;iostream&gt; #include &lt;thread&gt; int main() { std::thread th1; } std:üßµ:id thread::idÁ±ª ÊòØËΩªÈáèÁöÑÂèØÈ¢ëÁπÅÂ§çÂà∂Á±ªÔºåÂÆÉ‰Ωú‰∏∫ std::thread ÂØπË±°ÁöÑÂîØ‰∏ÄÊ†áËØÜÁ¨¶Â∑•‰Ωú„ÄÇ
#include &lt;iostream&gt; #include &lt;thread&gt; typedef unsigned long long ULL; std::string getThreadIdOfString(const std:üßµ:id &amp; id) { std::stringstream sin; sin &lt;&lt; id; return sin.str(); } ULL getThreadIdOfULL(const std:üßµ:id &amp; id) { return std::stoull(getThreadIdOfString(id)); } int main() { std:üßµ:id id = std::this_thread::get_id(); std::cout &lt;&lt; &#34;cout ----- id : &#34; &lt;&lt; id &lt;&lt; std::endl; std::cout &lt;&lt; &#34;getThreadIdOfString ----- id : &#34; &lt;&lt; getThreadIdOfString(id) &lt;&lt; std::endl; std::cout &lt;&lt; &#34;getThreadIdOfULL ----- id : &#34; &lt;&lt; getThreadIdOfULL(id) &lt;&lt; std::endl; return 0; } std:üßµ:hardware_concurrency() ËøîÂõûÂ§ÑÁêÜÂô®ÊîØÊåÅÁöÑÂπ∂ÂèëÁ∫øÁ®ãÊï∞„ÄÇ]]></description>
</item>
</channel>
</rss>
