<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mutex on My Blog</title>
    <link>https://okokfun.github.io/tags/mutex/</link>
    <description>Recent content in Mutex on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 15 Jan 2022 17:13:05 +0000</lastBuildDate><atom:link href="https://okokfun.github.io/tags/mutex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程支持库</title>
      <link>https://okokfun.github.io/post/c&#43;&#43;/%E7%BA%BF%E7%A8%8B%E6%94%AF%E6%8C%81%E5%BA%93/</link>
      <pubDate>Sat, 15 Jan 2022 17:13:05 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/c&#43;&#43;/%E7%BA%BF%E7%A8%8B%E6%94%AF%E6%8C%81%E5%BA%93/</guid>
      <description>此文来自于👉线程支持库 - cppreference.com
线程支持库 thread(C++11) std::thread 类与支持函数 stop_token(C++20) std::jthread 的停止记号 mutex(C++11) 互斥元件 shared_mutex(C++14) 共享互斥元件 future(C++11) 异步计算元件 condition_variable(C++11) 线程等待条件 semaphore(C++20) 信号量 latch(C++20) 闩 barrier(C++20) 屏障 #include &amp;lt;thread&amp;gt; std::thread thread类 表示单个执行线程。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;thread&amp;gt; int main() { std::thread th1; } std:🧵:id thread::id类 是轻量的可频繁复制类，它作为 std::thread 对象的唯一标识符工作。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;thread&amp;gt; typedef unsigned long long ULL; std::string getThreadIdOfString(const std:🧵:id &amp;amp; id) { std::stringstream sin; sin &amp;lt;&amp;lt; id; return sin.str(); } ULL getThreadIdOfULL(const std:🧵:id &amp;amp; id) { return std::stoull(getThreadIdOfString(id)); } int main() { std:🧵:id id = std::this_thread::get_id(); std::cout &amp;lt;&amp;lt; &amp;#34;cout ----- id : &amp;#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;getThreadIdOfString ----- id : &amp;#34; &amp;lt;&amp;lt; getThreadIdOfString(id) &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;getThreadIdOfULL ----- id : &amp;#34; &amp;lt;&amp;lt; getThreadIdOfULL(id) &amp;lt;&amp;lt; std::endl; return 0; } std:🧵:hardware_concurrency() 返回处理器支持的并发线程数。</description>
    </item>
    
  </channel>
</rss>
