<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>STL - Tag - My Blog</title>
        <link>https://okokfun.github.io/tags/stl/</link>
        <description>STL - Tag - My Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 19 Mar 2022 00:01:15 &#43;0000</lastBuildDate><atom:link href="https://okokfun.github.io/tags/stl/" rel="self" type="application/rss+xml" /><item>
    <title>第三部分-新的标准库组件</title>
    <link>https://okokfun.github.io/posts/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E6%96%B0%E7%9A%84%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6/</link>
    <pubDate>Sat, 19 Mar 2022 00:01:15 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://okokfun.github.io/posts/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E6%96%B0%E7%9A%84%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6/</guid>
    <description><![CDATA[第三部分 新的标准库组件 本部分介绍了 C++17 的新库组件。
15 std::optional&lt;&gt; 在编程中，我们经常遇到可能返回/传递/使用某种类型的对象的情况。也就是说，我们可以有一个特定类型的值，或者我们可能根本没有任何值。因此，我们需要一种模拟类似于指针的语义的方法，我们可以通过使用 nullptr 来表示没有值。处理这个问题的方法是定义一个特定类型的对象，带有一个额外的布尔成员/标志，表明一个值是否存在。 std::optional&lt;&gt; 以类型安全的方式提供此类对象。
可选对象仅具有包含对象的内部存储器以及布尔标志。因此，大小通常比包含的对象大一个字节。对于某些包含的类型，甚至可能根本没有大小开销，前提是可以将附加信息放置在包含的对象中。没有分配堆内存。对象使用与包含类型相同的对齐方式。
但是，可选对象不仅仅是将布尔标志的功能添加到值成员的结构。例如，如果没有值，则不会为包含的类型调用构造函数（因此，您可以为对象提供没有的默认状态）。
与 std::variant&lt;&gt; 和 std::any 一样，结果对象具有值语义。也就是说，复制被实现为深度复制，创建一个独立的对象，带有标志和包含的值（如果有的话）在它自己的内存中。复制没有包含值的 std::optional&lt;&gt; 很便宜；复制带有包含值的 std::optional&lt;&gt; 与复制包含的类型/值一样便宜/昂贵。支持移动语义。
15.1 使用 std::optional&lt;&gt; std::optional&lt;&gt;模型是一个任意类型的可忽略的实例。这个实例可能是一个成员，一个参数，或者一个返回值。你也可以说，std::optional&lt;&gt;是一个容纳零或一个元素的容器。
15.1.1 可选的返回值 以下程序演示了 std::optional&lt;&gt; 用作返回值的能力： lib/optional.cpp
#include &lt;optional&gt; #include &lt;string&gt; #include &lt;iostream&gt; // 如果可能，将字符串转换为 int: std::optional&lt;int&gt; asInt(const std::string&amp; s) { try { return std::stoi(s); } catch (...) { return std::nullopt; } } int main() { for (auto s : {&#34;42&#34;, &#34; 077&#34;, &#34;hello&#34;, &#34;0x33&#34;} ) { // 如果可能，尝试将 s 转换为 int 并打印结果: std::optional&lt;int&gt; oi = asInt(s); if (oi) { std::cout &lt;&lt; &#34;convert &#39;&#34; &lt;&lt; s &lt;&lt; &#34;&#39; to int: &#34; &lt;&lt; *oi &lt;&lt; &#34;\n&#34;; } else { std::cout &lt;&lt; &#34;can&#39;t convert &#39;&#34; &lt;&lt; s &lt;&lt; &#34;&#39; to int\n&#34;; } } } 在程序中 asInt() 是将传递的字符串转换为整数的函数。 但是，这可能不会成功。 出于这个原因，使用了 std::optional&lt;&gt; 以便我们可以返回&quot;no int&quot;并避免为其定义一个特殊的 int 值或向调用者抛出异常。 因此，我们要么返回调用 stoi() 的结果，它用一个 int 初始化返回值，要么我们返回 std::nullopt，表明我们没有一个 int 值。 我们可以实现如下相同的行为：]]></description>
</item>
<item>
    <title>第四部分-标准库扩展和修改</title>
    <link>https://okokfun.github.io/posts/%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E6%A0%87%E5%87%86%E5%BA%93%E6%89%A9%E5%B1%95%E5%92%8C%E4%BF%AE%E6%94%B9/</link>
    <pubDate>Sat, 19 Mar 2022 00:01:15 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://okokfun.github.io/posts/%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E6%A0%87%E5%87%86%E5%BA%93%E6%89%A9%E5%B1%95%E5%92%8C%E4%BF%AE%E6%94%B9/</guid>
    <description><![CDATA[第四部分 标准库扩展和修改 这一部分介绍了用C++17对现有库组件的扩展和修改。
21类型特征扩展 关于类型特征（标准类型函数），C++17扩展了使用它们的一般能力，并且 引入了一些新的类型特征。
21.1 类型特征的Suffix _v 从C++17开始，你可以对所有产生数值的类型特征使用后缀_v（因为你可以对所有产生类型的类型特征使用后缀_t）。例如，对于任何类型的T，而不是
std::is_const&lt;T&gt;::value 你现在可以写:
std::is_const_v&lt;T&gt; // since C++17 这适用于所有类型特征。其方法是，为每个标准类型特征定义一个相应的 变量模板。比如说:
namespace std { template&lt;typename T&gt; constexpr bool is_const_v = is_const&lt;T&gt;::value; } 通常，这有助于制定布尔条件，你可以在运行时使用:
if (std::is_signed_v&lt;char&gt;) { ... } 但由于类型特征是在编译时评估的，所以你可以在编译时使用编译时的结果，即compile-time if:
if constexpr (std::is_signed_v&lt;char&gt;) { ... } 或在实例化模板时:
// C&lt;T&gt;类的主要模板 template&lt;typename T, bool = std::is_pointer_v&lt;T&gt;&gt; class C { ... }; // 指针类型的部分特殊化。 template&lt;typename T&gt; class C&lt;T, true&gt; { ... }; 在这里，以C类为例，它为指针类型提供了一个特殊的实现。 但是如果类型特征产生一个非布尔值，后缀_v也可以使用，比如std::extreme&lt;&gt;。它产生的是一个原始数组的维度大小:
int a[5][7]; std::cout &lt;&lt; std::extent_v&lt;decltype(a)&gt; &lt;&lt; &#39;\n&#39;; // prints 5 std::cout &lt;&lt; std::extent_v&lt;decltype(a),1&gt; &lt;&lt; &#39;\n&#39;; // prints 7 21.]]></description>
</item>
</channel>
</rss>
