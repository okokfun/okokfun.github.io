<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory on My Blog</title>
    <link>https://okokfun.github.io/tags/memory/</link>
    <description>Recent content in Memory on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 18 Jan 2022 13:20:39 +0000</lastBuildDate><atom:link href="https://okokfun.github.io/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>动态内存管理</title>
      <link>https://okokfun.github.io/post/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 18 Jan 2022 13:20:39 +0000</pubDate>
      
      <guid>https://okokfun.github.io/post/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>此文取自于👉动态内存管理 - cppreference.com
std::unique_ptr 拥有独有对象所有权语义的智能指针
#include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;memory&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;functional&amp;gt; struct B { virtual void bar() { std::cout &amp;lt;&amp;lt; &amp;#34;B::bar\n&amp;#34;; } virtual ~B() = default; }; struct D : B { D() { std::cout &amp;lt;&amp;lt; &amp;#34;D::D\n&amp;#34;; } ~D() { std::cout &amp;lt;&amp;lt; &amp;#34;D::~D\n&amp;#34;; } void bar() override { std::cout &amp;lt;&amp;lt; &amp;#34;D::bar\n&amp;#34;; } }; // 消费 unique_ptr 的函数能以值或以右值引用接收它 std::unique_ptr&amp;lt;D&amp;gt; pass_through(std::unique_ptr&amp;lt;D&amp;gt; p) { p-&amp;gt;bar(); return p; } void close_file(std::FILE* fp) { std::fclose(fp); } int main() { std::cout &amp;lt;&amp;lt; &amp;#34;unique ownership semantics demo\n&amp;#34;; { auto p = std::make_unique&amp;lt;D&amp;gt;(); // p 是占有 D 的 unique_ptr auto q = pass_through(std::move(p)); assert(!</description>
    </item>
    
  </channel>
</rss>
