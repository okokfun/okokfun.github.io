<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Memory - Tag - My Blog</title>
        <link>https://okokfun.github.io/tags/memory/</link>
        <description>Memory - Tag - My Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 18 Jan 2022 13:20:39 &#43;0000</lastBuildDate><atom:link href="https://okokfun.github.io/tags/memory/" rel="self" type="application/rss+xml" /><item>
    <title>Âä®ÊÄÅÂÜÖÂ≠òÁÆ°ÁêÜ</title>
    <link>https://okokfun.github.io/posts/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <pubDate>Tue, 18 Jan 2022 13:20:39 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://okokfun.github.io/posts/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[Ê≠§ÊñáÂèñËá™‰∫éüëâÂä®ÊÄÅÂÜÖÂ≠òÁÆ°ÁêÜ - cppreference.com
std::unique_ptr Êã•ÊúâÁã¨ÊúâÂØπË±°ÊâÄÊúâÊùÉËØ≠‰πâÁöÑÊô∫ËÉΩÊåáÈíà
#include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;memory&gt; #include &lt;cstdio&gt; #include &lt;fstream&gt; #include &lt;cassert&gt; #include &lt;functional&gt; struct B { virtual void bar() { std::cout &lt;&lt; &#34;B::bar\n&#34;; } virtual ~B() = default; }; struct D : B { D() { std::cout &lt;&lt; &#34;D::D\n&#34;; } ~D() { std::cout &lt;&lt; &#34;D::~D\n&#34;; } void bar() override { std::cout &lt;&lt; &#34;D::bar\n&#34;; } }; // Ê∂àË¥π unique_ptr ÁöÑÂáΩÊï∞ËÉΩ‰ª•ÂÄºÊàñ‰ª•Âè≥ÂÄºÂºïÁî®Êé•Êî∂ÂÆÉ std::unique_ptr&lt;D&gt; pass_through(std::unique_ptr&lt;D&gt; p) { p-&gt;bar(); return p; } void close_file(std::FILE* fp) { std::fclose(fp); } int main() { std::cout &lt;&lt; &#34;unique ownership semantics demo\n&#34;; { auto p = std::make_unique&lt;D&gt;(); // p ÊòØÂç†Êúâ D ÁöÑ unique_ptr auto q = pass_through(std::move(p)); assert(!]]></description>
</item>
</channel>
</rss>
